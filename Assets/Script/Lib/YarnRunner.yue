import "yarncompile"
import "Content"
import "json"

rewriteError = (err, luaCode, title)->
	line, msg = err\match ".*:(%d+):%s*(.*)"
	line = tonumber line
	current = 1
	lastLine = 1
	lineMap = {}
	for lineCode in luaCode\gmatch "([^\r\n]*)\r?\n?"
		num = lineCode\match "--%s*(%d+)%s*$"
		lastLine = tonumber num if num
		lineMap[current] = lastLine
		current += 1
	line = lineMap[line] or line
	"#{title}:#{line}: #{msg}"

export default class YarnRunner
	gotoStory: (title)=>
		storyFunc = @funcs[title]
		unless storyFunc
			yarnCode = @codes[title]
			luaCode, err = yarncompile yarnCode
			unless luaCode
				if @startTitle
					return false, "#{title}:#{err}"
				else
					coroutine.yield "Error", "#{title}:#{err}"
					return
			@codes[title] = luaCode
			luaFunc, err = load luaCode, title
			unless luaFunc
				err = rewriteError err, luaCode, title
				if @startTitle
					return false, err
				else
					coroutine.yield "Error", err
					return
			storyFunc = luaFunc!
			@funcs[title] = storyFunc
		visitedCount = @visited[title] ?? 0
		@visited[title] = 1 + visitedCount
		@stories[] = {title, coroutine.create ->
			storyFunc title, @state, @command, @yarn, @\gotoStory
		}
		true

	new: (filename, startTitle, state = {}, command = {}, testing = false)=>
		jsonCode = Content\load filename
		error "failed to read yarn file \"#{filename}\"" unless jsonCode
		jsonObject = json.load jsonCode
		error "failed to load yarn json code" unless jsonObject

		@codes = {}
		@funcs = {}
		@state = state
		@command = {
			stop: -> coroutine.yield "Stop"
			...command
		}
		@command.<> = command.<>
		@stories = {}
		@visited = {}
		@yarn = {
			dice: (num)-> math.random num
			random: -> math.random!
			random_range: (start, stop)-> math.random start, stop
			visited: (name)-> @visited[name]?
			visited_count: (name)-> @visited[name] ?? 0
		}
		@startTitle = startTitle
		if testing
			if variables = jsonObject.header?.pluginStorage?.Runner?.variables
				for {:key, :value} in *variables
					switch value when "true"
						state[key] = true
					when "false"
						state[key] = false
					else
						if num = tonumber value
							state[key] = num
						else
							state[key] = value
		if nodes = jsonObject.nodes
			for node in *nodes
				:title, :body = node
				@codes[title] = body

	advance: (choice)=>
		if @startTitle
			success, err = @gotoStory @startTitle
			@startTitle = nil
			return "Error", err unless success
		if choice
			unless @option
				return "Error", "there is no option to choose"
			:title, :branches = @option
			if not (1 <= choice <= #branches)
				return "Error", "choice #{choice} is out of range"
			optionBranch = branches[choice]
			@option = nil
			@stories[] = {title, coroutine.create optionBranch}
		elseif @option
			return "Error", "required a choice to continue"
		local title
		success, resultType, body, branches = if storyItem = @stories[#@stories]
			{title, story} = storyItem
			coroutine.resume story
		if not success and #@stories > 0
			@stories = {}
			err = rewriteError resultType, @codes[title], title
			return "Error", err
		unless resultType
			if #@stories > 0
				@stories[#@stories] = nil
				return @advance!
		switch resultType
			when "Dialog"
				"Text", body
			when "Option"
				@option = {:title, :branches}
				"Option", body
			when "Goto"
				@advance!
			when "Command"
				"Command", body
			when "Error", "Stop"
				@stories = {}
				"Error", body
			else
				nil, "end of the story"

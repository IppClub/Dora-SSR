_ENV = Dora!

HttpServer\stop!

HttpServer.wwwPath = Path Content.writablePath, ".www"

from "Utils" import LintYueGlobals

getProjectDirFromFile = (file)->
	:writablePath = Content
	return nil if writablePath ~= file\sub 1, #writablePath
	current = Path\getRelative file, writablePath
	repeat
		current = Path\getPath current
		break if current == ""
		for f in *Content\getFiles Path writablePath, current
			if Path\getName(f)\lower! == "init"
				return Path current, Path\getPath f
	until false
	nil

getSearchPath = (file)->
	if dir := getProjectDirFromFile file
		return Path(dir, "Script", "?.lua") .. ";" .. Path dir, "?.lua"
	""

getSearchFolders = (file)->
	if dir := getProjectDirFromFile file
		return
			* Path dir, "Script"
			* dir
	[]

disabledCheckForLua =
	* "incompatible number of returns"
	* "unknown variable"
	* "cannot index key"
	* "module not found"
	* "don't know how to resolve a dynamic require"
	* "ContainerItem"
	* "cannot resolve a type"
	* "invalid key"
	* "inconsistent index type"
	* "cannot use operator '#'"
	* "attempting ipairs loop"
	* "expects record or nominal"

yueCheck = (file, content)->
	searchPath = getSearchPath file
	checkResult, luaCodes = yue.checkAsync content, searchPath
	info = []
	globals = []
	for [t, msg, line, col] in *checkResult
		switch t when "error"
			info[] = ["syntax", file, line, col, msg]
		when "global"
			globals[] = [msg, line, col]
	if luaCodes
		success, lintResult = LintYueGlobals luaCodes, globals, false
		if success
			luaCodes = luaCodes\gsub "%s*local%s*_ENV%s*=%s*Dora%([^%)]-%)[^\n\r]+[\n\r%s]*", "\n"
			lintResult ..= "\n" unless lintResult == ""
			luaCodes = "-- [yue]: #{file}\n#{lintResult}" .. luaCodes
		else for [name, line, col] in *lintResult
			info[] = ["syntax", file, line, col, "invalid global variable"]
	luaCodes, info

luaCheck = (file, content)->
	res, err = load content, "check"
	if not res
		line, msg = err\match ".*:(%d+):%s*(.*)"
		return success: false, info: [ ["syntax", file, tonumber(line), 0, msg],]
	success, info = teal.checkAsync content, file, true, ""
	if info
		info = for item in *info
			useCheck = true
			for check in *disabledCheckForLua
				if not item[5]\match("unused") and item[5]\match check
					useCheck = false
			continue unless useCheck
			switch item[1]
				when "type"
					item[1] = "warning"
				when "parsing", "syntax"
					continue
			item
		if #info == 0
			info = nil
			success = true
	return :success, :info

luaCheckWithLineInfo = (file, luaCodes)->
	res = luaCheck file, luaCodes
	info = []
	if not res.success
		current = 1
		lastLine = 1
		lineMap = {}
		for lineCode in luaCodes\gmatch "([^\r\n]*)\r?\n?"
			num = lineCode\match "--%s*(%d+)%s*$"
			if num
				lastLine = tonumber num
			lineMap[current] = lastLine
			current += 1
		for item in *res.info
			item[3] = lineMap[item[3]] or 0
			item[4] = 0
			info[] = item
		return false, info
	return true, info

getCompiledYueLine = (content, line, row, file)->
	luaCodes, info = yueCheck file, content
	return nil unless luaCodes
	current = 1
	lastLine = 1
	targetLine = nil
	targetRow = nil
	lineMap = {}
	for lineCode in luaCodes\gmatch "([^\r\n]*)\r?\n?"
		num = lineCode\match "--%s*(%d+)%s*$"
		lastLine = tonumber num if num
		lineMap[current] = lastLine
		if row == lastLine and not targetLine
			targetRow = current
			targetLine = line\gsub("::", "\\")\gsub(":", "=")\gsub("\\", ":")\match "[%w_%.:]+$"
			break if targetLine
		current += 1
	if targetLine and targetRow
		luaCodes, targetLine, targetRow, lineMap
	else
		nil

HttpServer\postSchedule "/check", (req)->
	switch req when {body: {:file, :content}}
		ext = Path\getExt file
		switch ext when "tl"
			searchPath = getSearchPath file
			success, info = teal.checkAsync content, file, false, searchPath
			return :success, :info
		when "lua"
			return luaCheck file, content
		when "yue"
			luaCodes, info = yueCheck file, content
			success = false
			if luaCodes
				luaSuccess, luaInfo = luaCheckWithLineInfo file, luaCodes
				info = [...info, ...luaInfo]
				success and= luaSuccess
			return if #info > 0
				:success, :info
			else
				:success
		when "xml"
			success, result = xml.check content
			if success
				success, info = luaCheckWithLineInfo file, result
				return if #info > 0
					:success, :info
				else
					:success
			else
				info = for [row, err] in *result
					["syntax", file, row, 0, err]
				return success: false, :info
	success: true

updateInferedDesc = (infered)->
	return if not infered.key or infered.key == "" or infered.desc\match "^polymorphic function %(with types "
	:key, :row = infered
	if codes := Content\loadAsync key
		comments = []
		line = 0
		skipping = false
		for lineCode in codes\gmatch "([^\r\n]*)\r?\n?"
			line += 1
			break if line >= row
			if lineCode\match "^%s*%-%- @"
				skipping = true
				continue
			if result := lineCode\match "%s*%-%- (.+)"
				comments[] = result unless skipping
			elseif #comments > 0
				comments = []
				skipping = false
		infered.doc = table.concat comments, "\n"

HttpServer\postSchedule "/infer", (req)->
	switch req when {body: {:lang, :file, :content, :line, :row}}
		searchPath = getSearchPath file
		switch lang when "tl", "lua"
			infered = teal.inferAsync content, line, row, searchPath
			if infered?
				updateInferedDesc infered
				return success: true, :infered
		when "yue"
			luaCodes, targetLine, targetRow, lineMap = getCompiledYueLine content, line, row, file
			return success: false unless luaCodes
			infered = teal.inferAsync luaCodes, targetLine, targetRow, searchPath
			if infered?
				:file, :row, :col = infered
				if file == "" and row > 0 and col > 0
					infered.row = lineMap[row] or 0
					infered.col = 0
				updateInferedDesc infered
				return success: true, :infered
	success: false

getParamDocs = (signatures)->
	if codes := Content\loadAsync signatures[1].file
		comments = []
		params = []
		line = 0
		docs = []
		returnType = nil
		for lineCode in codes\gmatch "([^\r\n]*)\r?\n?"
			line += 1
			needBreak = true
			for i, {:row} in ipairs signatures
				if line >= row and not docs[i]?
					if #comments > 0 or #params > 0 or returnType
						docs[i] = {
							doc: table.concat comments, "  \n"
							:returnType
						}
						docs[i].params = params if #params > 0
					else
						docs[i] = false
				needBreak = false if not docs[i]
			break if needBreak
			if result := lineCode\match "%s*%-%- (.+)"
				name, typ, desc = result\match "^@param%s*([%w_]+)%s*%(([^%)]-)%)%s*(.+)"
				if not name
					name, typ, desc = result\match "^@param%s*(%.%.%.)%s*%(([^%)]-)%)%s*(.+)"
				if name
					pname = name
					pname ..= "?" if desc\match("%[optional%]") or desc\match "%[可选%]"
					params[] = {
						name: "#{pname}: #{typ}"
						desc: "**#{name}**: #{desc}"
					}
				else
					if typ := result\match "^@return%s*%(([^%)]-)%)"
						returnType = if returnType
							returnType .. ", " .. typ
						else
							typ
						result = result\gsub "@return", "**return:**"
					comments[] = result
			elseif #comments > 0
				comments = []
				params = []
				returnType = nil
		results = []
		for doc in *docs
			continue unless doc
			doc.desc = if doc.params
				"function(#{table.concat [param.name for param in *doc.params], ', '})"
			else
				"function()"
			if doc.returnType
				doc.desc ..= ": #{doc.returnType}"
				doc.returnType = nil
			results[] = doc
		return if #results > 0 then results else nil
	nil

HttpServer\postSchedule "/signature", (req)->
	switch req when {body: {:lang, :file, :content, :line, :row}}
		searchPath = getSearchPath file
		switch lang when "tl", "lua"
			if signatures := teal.getSignatureAsync content, line, row, searchPath
				if signatures := getParamDocs signatures
					return success: true, :signatures
		when "yue"
			luaCodes, targetLine, targetRow, lineMap = getCompiledYueLine content, line, row, file
			return success: false unless luaCodes
			if chainOp, chainCall := line\match "[^%w_]([%.\\])([^%.\\]+)$"
				withVar = luaCodes\match "([%w_]+)%.___DUMMY_CALL___%(%)"
				targetLine = withVar .. (chainOp == '\\' and ':' or '.') .. chainCall
			if signatures := teal.getSignatureAsync luaCodes, targetLine, targetRow, searchPath
				if signatures := getParamDocs signatures
					return success: true, :signatures
			elseif signatures := teal.getSignatureAsync luaCodes, "dora.#{targetLine}", targetRow, searchPath
				if signatures := getParamDocs signatures
					return success: true, :signatures
	success: false

luaKeywords = [
	'and'
	'break'
	'do'
	'else'
	'elseif'
	'end'
	'false'
	'for'
	'function'
	'goto'
	'if'
	'in'
	'local'
	'nil'
	'not'
	'or'
	'repeat'
	'return'
	'then'
	'true'
	'until'
	'while'
]

tealKeywords = [
	'record'
	'as'
	'is'
	'type'
	'embed'
	'enum'
	'global'
	'any'
	'boolean'
	'integer'
	'number'
	'string'
	'thread'
]

yueKeywords = [
	"and"
	"break"
	"do"
	"else"
	"elseif"
	"false"
	"for"
	"goto"
	"if"
	"in"
	"local"
	"nil"
	"not"
	"or"
	"repeat"
	"return"
	"then"
	"true"
	"until"
	"while"
	"as"
	"class"
	"continue"
	"export"
	"extends"
	"from"
	"global"
	"import"
	"macro"
	"switch"
	"try"
	"unless"
	"using"
	"when"
	"with"
]

HttpServer\postSchedule "/complete", (req)->
	switch req when {body: {:lang, :file, :content, :line, :row}}
		searchPath = getSearchPath file
		repeat
			item = line\match "require%s*%(%s*['\"]([%w%d-_%./ ]*)$"
			if lang == "yue"
				item = line\match "require%s*['\"]([%w%d-_%./ ]*)$" unless item
				item = line\match "import%s*['\"]([%w%d-_%.]*)$" unless item
			searchType = nil
			if not item
				item = line\match "Sprite%s*%(%s*['\"]([%w%d-_/ ]*)$"
				if lang == "yue"
					item = line\match "Sprite%s*['\"]([%w%d-_/ ]*)$"
				searchType = "Image" if item?
			if not item
				item = line\match "Label%s*%(%s*['\"]([%w%d-_/ ]*)$"
				if lang == "yue"
					item = line\match "Label%s*['\"]([%w%d-_/ ]*)$"
				searchType = "Font" if item?
			break unless item
			:searchPaths = Content
			for folder in *getSearchFolders file
				searchPaths[] = folder
			searchPaths[] = Content.assetPath if searchType
			tokens = [mod for mod in item\gmatch "([%w%d-_ ]+)[%./]"]
			suggestions = []
			for path in *searchPaths
				sPath = Path path, table.unpack tokens
				continue unless Content\exist sPath
				if searchType == "Font"
					fontPath = Path sPath, "Font"
					if Content\exist fontPath
						for f in *Content\getFiles fontPath
							if Path\getExt(f) in ["ttf", "otf"]
								continue if "." == f\sub 1, 1
								suggestions[] = [Path\getName(f), "font", "field"]
				for f in *Content\getFiles sPath
					switch searchType when "Image"
						switch Path\getExt f when "clip", "jpg", "png", "dds", "pvr", "ktx"
							continue if "." == f\sub 1, 1
							suggestions[] = [f, "image", "field"]
						continue
					when "Font"
						switch Path\getExt f when "ttf", "otf"
							continue if "." == f\sub 1, 1
							suggestions[] = [f, "font", "field"]
						continue
					switch Path\getExt f when "lua", "tl", "yue", "xml"
						name = Path\getName f
						continue if "d" == Path\getExt name
						continue if "." == name\sub 1, 1
						suggestions[] = [name, "module", "field"]
				for dir in *Content\getDirs sPath
					continue if "." == dir\sub 1, 1
					suggestions[] = [dir, "folder", "variable"]
			if item == "" and not searchType
				for [name,] in *teal.completeAsync "", "dora.", 1, searchPath
					suggestions[] = [name, "dora module", "function"]
			if #suggestions > 0
				suggestions = [v for _, v in pairs {item[1] .. item[2], item for item in *suggestions}]
				return success: true, :suggestions
			else
				return success: false
		until true
		switch lang when "tl", "lua"
			suggestions = teal.completeAsync content, line, row, searchPath
			if not line\match("[%.:][%w_]+[%.:]?$") and not line\match "[%w_]+[%.:]$"
				checkSet = {name, true for {name} in *suggestions}
				for item in *teal.completeAsync "", "dora.", 1, searchPath
					suggestions[] = item if not checkSet[item[1]]
				for word in *luaKeywords
					suggestions[] = [word, "keyword", "keyword"]
				if lang == "tl"
					for word in *tealKeywords
						suggestions[] = [word, "keyword", "keyword"]
			if #suggestions > 0
				return success: true, :suggestions
		when "yue"
			suggestions = []
			gotGlobals = false
			if luaCodes, targetLine, targetRow := getCompiledYueLine content, line, row, file
				gotGlobals = true
				if chainOp := line\match "[^%w_]([%.\\])$"
					withVar = luaCodes\match "([%w_]+)%.___DUMMY_CALL___%(%)"
					return success: false unless withVar
					targetLine = "#{withVar}#{chainOp == '\\' and ':' or '.'}"
				elseif line\match "^([%.\\])$"
					return success: false
				suggestions[] = item for item in *teal.completeAsync luaCodes, targetLine, targetRow, searchPath
				if #suggestions == 0
					suggestions[] = item for item in *teal.completeAsync luaCodes, "dora.#{targetLine}", targetRow, searchPath
			if not line\match("[%.:\\][%w_]+[%.\\]?$") and not line\match "[%.\\]$"
				checkSet = {name, true for {name} in *suggestions}
				for item in *teal.completeAsync "", "dora.", 1, searchPath
					suggestions[] = item if not checkSet[item[1]]
				if not gotGlobals
					for item in *teal.completeAsync "", "x", 1, searchPath
						suggestions[] = item if not checkSet[item[1]]
				for word in *yueKeywords
					if not checkSet[word]
						suggestions[] = [word, "keyword", "keyword"]
			if #suggestions > 0
				return success: true, :suggestions
		when "xml"
			items = xml.complete content
			if #items > 0
				suggestions = for [label, insertText] in *items
					[label, insertText, "field"]
				return success: true, :suggestions
	success: false

HttpServer\upload(
	"/upload"
	(req, filename)->
		switch req when {params: {:path}}
			uploadPath = Path Content.writablePath, ".upload"
			if not Content\exist uploadPath
				Content\mkdir uploadPath
			targetPath = Path uploadPath, filename
			Content\mkdir Path\getPath targetPath
			return targetPath
		nil
	(req, file)->
		switch req when {params: {:path}}
			uploadPath = Path Content.writablePath, ".upload"
			targetPath = Path path, Path\getRelative file, uploadPath
			Content\mkdir Path\getPath targetPath
			if Content\move file, targetPath
				return true
		false
)

HttpServer\post "/list", (req)->
	switch req when {body: {:path}}
		if Content\exist path
			files = {}
			visitAssets = (path, folder)->
				dirs = Content\getDirs path
				for dir in *dirs
					continue if dir\match "^%."
					current = if folder == ""
						dir
					else
						Path folder, dir
					files[] = current
					visitAssets Path(path, dir), current
				fs = Content\getFiles path
				for f in *fs
					continue if f\match "^%."
					files[] = if folder == ""
						f
					else
						Path folder, f
			visitAssets path, ""
			files = nil if #files == 0
			return success: true, :files
	success: false

HttpServer\post "/info", -> return
	platform: App.platform
	locale: App.locale
	version: App.version

HttpServer\post "/new", (req)->
	switch req when {body: {:path, :content}}
		if not Content\exist path
			parent = Path\getPath path
			files = Content\getFiles parent
			name = Path\getName(path)\lower!
			for file in *files
				if name == Path\getName(file)\lower!
					return success: false
			if "" == Path\getExt path
				if Content\mkdir path
					return success: true
			elseif Content\save path, content
				return success: true
	success: false

HttpServer\post "/delete", (req)->
	switch req when {body: {:path}}
		if Content\exist path
			parent = Path\getPath path
			files = Content\getFiles parent
			name = Path\getName(path)\lower!
			ext = Path\getExt path
			for file in *files
				if name == Path\getName(file)\lower!
					switch Path\getExt file when "tl" then if ext in ["vs",]
						Content\remove Path parent, file
					when "lua" then if ext in ["tl", "yue", "ts", "tsx", "vs", "xml"]
						Content\remove Path parent, file
			if Content\remove path
				return success: true
	success: false

HttpServer\post "/rename", (req)->
	switch req when {body: {:old, :new}}
		if Content\exist(old) and not Content\exist new
			parent = Path\getPath new
			files = Content\getFiles parent
			name = Path\getName(new)\lower!
			for file in *files
				if name == Path\getName(file)\lower!
					return success: false
			if Content\move old, new
				newParent = Path\getPath new
				parent = Path\getPath old
				files = Content\getFiles parent
				newName = Path\getName new
				oldName = Path\getName old
				name = oldName\lower!
				ext = Path\getExt old
				for file in *files
					if name == Path\getName(file)\lower!
						switch Path\getExt file when "tl" then if ext in ["vs",]
							Content\move Path(parent, file), Path newParent, newName .. ".tl"
						when "lua" then if ext in ["tl", "yue", "ts", "tsx", "vs", "xml"]
							Content\move Path(parent, file), Path newParent, newName .. ".lua"
				return success: true
	success: false

HttpServer\postSchedule "/read", (req)->
	switch req when {body: {:path}}
		if Content\exist path
			if content := Content\loadAsync path
				return :content, success: true
	success: false

compileFileAsync = (inputFile, sourceCodes)->
	file = Path\getFilename inputFile
	searchPath = if dir := getProjectDirFromFile inputFile
		file = Path\getRelative inputFile, Path Content.writablePath, dir
		Path(dir, "Script", "?.lua") .. ";" .. Path dir, "?.lua"
	else ""
	outputFile = Path\replaceExt inputFile, "lua"
	options: {extension: yueext} = yue
	switch Path\getExt inputFile when yueext
		(success) <- yue.compile inputFile, outputFile, searchPath, (codes, err, globals)->
			return unless codes
			success, result = LintYueGlobals codes, globals
			return unless success
			codes = codes\gsub "%s*local%s*_ENV%s*=%s*Dora%([^%)]-%)[^\n\r]+[\n\r%s]*", "\n"
			result ..= "\n" unless result == ""
			"-- [yue]: #{file}\n#{result}" .. codes
		Content\remove outputFile if not success
	when "tl"
		if codes := teal.toluaAsync sourceCodes, file, searchPath
			Content\saveAsync outputFile, codes
		else
			Content\remove outputFile
	when "xml"
		if codes := xml.tolua sourceCodes
			Content\saveAsync outputFile, "-- [xml]: #{file}\n#{codes}"
		else
			Content\remove outputFile

HttpServer\postSchedule "/write", (req)->
	switch req when {body: {:path, :content}}
		if Content\saveAsync path, content
			switch Path\getExt path when "tl", "yue", "xml"
				compileFileAsync path, content
			return success: true
	success: false

extentionLevels =
	vs: 2
	ts: 1
	tsx: 1
	tl: 1
	yue: 1
	xml: 1
	lua: 0

HttpServer\post "/assets", ->
	visitAssets = (path, root)->
		children = nil
		dirs = Content\getDirs path
		for dir in *dirs
			if root then switch dir when ".upload", ".download", ".www", ".build", ".git"
				continue
			elseif dir == ".git"
				continue
			children = [] unless children
			children[] = visitAssets Path path, dir
		files = Content\getFiles path
		names = {}
		for file in *files
			continue if file\match "^%."
			name = Path\getName file
			if ext := names[name]
				lv1 = extentionLevels[ext] ?? -1
				ext = Path\getExt file
				lv2 = extentionLevels[ext] ?? -1
				names[name] = ext if lv2 > lv1
			else
				ext = Path\getExt file
				if not extentionLevels[ext]
					names[file] = ""
				else
					names[name] = ext
		files = [ext == '' and name or name .. '.' .. ext for name, ext in pairs names]
		for file in *files
			children = [] unless children
			children[] = {
				key: Path path, file
				dir: false
				title: file
			}
		if children
			table.sort children, (a, b)->
				if a.dir == b.dir
					a.title < b.title
				else
					a.dir
		title = Path\getFilename path
		if title == ""
			children
		else
			{
				key: path
				dir: true
				:title
				:children
			}
	zh = App.locale\match("^zh")?
	{
		key: Content.writablePath
		dir: true
		title: "Assets"
		children: [
			{
				key: Path Content.assetPath
				dir: true
				title: zh and "内置资源" or "Built-in"
				children: [
					with visitAssets Path Content.assetPath, "Doc", zh and "zh-Hans" or "en"
						.title = zh and "说明文档" or "Readme"
					with visitAssets Path Content.assetPath, "Script", "Lib", "Dora", zh and "zh-Hans" or "en"
						.title = zh and "接口文档" or "API Doc"
					with visitAssets Path Content.assetPath, "Script", "Example"
						.title = zh and "代码示例" or "Example"
					with visitAssets Path Content.assetPath, "Script", "Test"
						.title = zh and "功能测试" or "Test"
					visitAssets Path Content.assetPath, "Image"
					visitAssets Path Content.assetPath, "Spine"
					visitAssets Path Content.assetPath, "Font"
				]
			}
			...visitAssets Content.writablePath, true
		]
	}

HttpServer\postSchedule "/run", (req)->
	switch req when {body: {:file, :asProj}}
		import "Dev.Entry"
		if asProj
			if proj := getProjectDirFromFile file
				Entry.allClear!
				target = Path proj, "init"
				success, err = Entry.enterEntryAsync ["Project", target]
				target = target |> Path\getPath |> Path\getName
				return :success, :target, :err
		Entry.allClear!
		file = Path\replaceExt file, ""
		success, err = Entry.enterEntryAsync [Path\getName(file), file]
		return :success, :err
	success: false

HttpServer\postSchedule "/stop", ->
	import "Dev.Entry"
	success: Entry.stop!

HttpServer\postSchedule "/zip", (req)->
	switch req when {body: {:path, :zipFile}}
		Content\mkdir Path\getPath zipFile
		return success: Content\zipAsync path, zipFile, (file)->
			not (file\match('^%.') or file\match "[\\/]%.")
	success: false

HttpServer\postSchedule "/unzip", (req)->
	switch req when {body: {:zipFile, :path}}
		return success: Content\unzipAsync zipFile, path, (file)->
			not (file\match('^%.') or file\match("[\\/]%.") or file\match "__MACOSX")
	success: false

HttpServer\post "/editingInfo", (req)->
	import "Dev.Entry"
	config = Entry.getConfig!
	switch req when {body: {:editingInfo}}
		config.editingInfo = editingInfo
		success: true
	else
		if not config.editingInfo?
			import "json"
			folder = if App.locale\match '^zh' then 'zh-Hans' else 'en'
			config.editingInfo = json.dump {
				index: 0
				files: [
					{
						key: Path Content.assetPath, 'Doc', folder, 'welcome.md'
						title: "welcome.md"
					}
				]
			}
		success: true, editingInfo: config.editingInfo

HttpServer\post "/command", (req)->
	switch req when {body: {:code}}
		emit "AppCommand", code
	success: true

HttpServer\post "/exist", (req)->
	switch req when {body: {:file}}
		success: Content\exist file
	else
		success: false

status = url: nil
export default status

thread ->
	doraWeb = Path Content.assetPath, "www", "index.html"
	doraReady = Path Content.writablePath, ".www", "dora-ready"
	if Content\exist doraWeb
		needReload = if Content\exist doraReady
			App.version ~= Content\load doraReady
		else true
		if needReload
			Content\remove Path Content.writablePath, ".www"
			Content\copyAsync(
				Path Content.assetPath, "www"
				Path Content.writablePath, ".www"
			)
			Content\save doraReady, App.version
			print "Dora Dora is ready!"
		if HttpServer\start 8866
			:localIP = HttpServer
			localIP = "localhost" if localIP == ""
			status.url = "http://#{localIP}:8866"
			HttpServer\startWS 8868
		else
			status.url = nil
			print "8866 Port not available!"

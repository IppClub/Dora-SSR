--[[ Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ]]

_ENV = Dora Dora.ImGui
import "ImGuiEnum" as :$WindowFlag, :$SetCond
const :Content, :Path = Dora
const type = type

App.idled = true
ShowConsole false, true

moduleCache = []
oldRequire = _G.require
const require = (path) ->
	loaded = package.loaded[path]
	if loaded == nil
		moduleCache[] = path
		return oldRequire path
	loaded
_G.require = require
Dora.require = require

:searchPaths = Content

useChinese = App.locale\match("^zh")?
updateLocale = ->
	useChinese = App.locale\match("^zh")?
	searchPaths[#searchPaths] = Path Content.assetPath, "Script", "Lib", "Dora", useChinese and "zh-Hans" or "en"
	Content.searchPaths = searchPaths

if DB\exist "Config"
	switch DB\query "select value_str from Config where name = 'locale'"
		when [ [locale,], ] then if App.locale ~= locale
			App.locale = locale
			updateLocale!

import "Config"
config = Config(
	""
	"fpsLimited"
	"targetFPS"
	"fixedFPS"
	"vsync"
	"fullScreen"
	"winX"
	"winY"
	"winWidth"
	"winHeight"
	"themeColor"
	"locale"
	"editingInfo"
	"showStats"
	"showConsole"
	"showFooter"
	"filter"
	"engineDev"
	"webProfiler"
	"drawerWidth"
	"lastUpdateCheck"
	"updateNotification"
)
config\load!
if config.fpsLimited?
	App.fpsLimited = config.fpsLimited
else
	config.fpsLimited = App.fpsLimited

if config.targetFPS?
	App.targetFPS = config.targetFPS
else
	config.targetFPS = App.targetFPS

if config.vsync?
	View.vsync = config.vsync
else
	config.vsync = View.vsync

if config.fixedFPS?
	Director.scheduler.fixedFPS = config.fixedFPS
else
	config.fixedFPS = Director.scheduler.fixedFPS

showEntry = true

isDesktop = false
if App.platform in ["Linux", "Windows", "macOS"]
	isDesktop = true
	if config.fullScreen
		App.winSize = Size.zero
	elseif config.winWidth? and config.winHeight?
		size = Size config.winWidth, config.winHeight
		if App.winSize ~= size
			App.winSize = size
			showEntry = false
			thread ->
				sleep!
				sleep!
				showEntry = true
		x: winX, y: winY = App.winPosition
		if config.winX?
			winX = config.winX
		else
			config.winX = 0
		if config.winY?
			winY = config.winY
		else
			config.winY = 0
		App.winPosition = Vec2 winX, winY

if config.themeColor?
	App.themeColor = Color config.themeColor
else
	config.themeColor = App.themeColor\toARGB!

if not config.locale?
	config.locale = App.locale

showStats = false
if config.showStats?
	showStats = config.showStats
else
	config.showStats = showStats

showConsole = true
if config.showConsole?
	showConsole = config.showConsole
else
	config.showConsole = showConsole

showFooter = true
if config.showFooter?
	showFooter = config.showFooter
else
	config.showFooter = showFooter

filterBuf = Buffer 20
if config.filter?
	filterBuf.text = config.filter
else
	config.filter = ""

engineDev = false
if config.engineDev?
	engineDev = config.engineDev
else
	config.engineDev = engineDev

if config.webProfiler?
	Director.profilerSending = config.webProfiler
else
	config.webProfiler = true
	Director.profilerSending = true

unless config.drawerWidth?
	config.drawerWidth = 200

export.getConfig = -> config
export.getEngineDev = ->
	return false unless App.debugging
	config.engineDev

updateCheck = -> thread ->
	if res := HttpClient\getAsync "https://api.github.com/repos/IppClub/Dora-SSR/releases/latest"
		if data := json.load res
			major, minor, patch = App.version\match "(%d+)%.(%d+)%.(%d+)%.(%d+)"
			a, b, c = tonumber(major), tonumber(minor), tonumber patch
			sa, sb, sc = data.tag_name\match "v(%d+)%.(%d+)%.(%d+)"
			na, nb, nc = tonumber(sa), tonumber(sb), tonumber sc
			if na < a
				goto not_new_version
			if na == a
				if nb < b
					goto not_new_version
				if nb == b
					if nc < c
						goto not_new_version
					if nc == c
						goto not_new_version
			config.updateNotification = true
			::not_new_version::
			config.lastUpdateCheck = os.time!

if config.lastUpdateCheck?
	diffSeconds = os.difftime os.time!, config.lastUpdateCheck
	if diffSeconds >= 7 * 24 * 60 * 60
		updateCheck!
else
	updateCheck!

from "Utils" import Set, Struct, LintYueGlobals, GSplit
options: {extension: yueext} = yue

isChineseSupported = IsFontLoaded!
unless isChineseSupported
	<- LoadFontTTF "Font/sarasa-mono-sc-regular.ttf", 20, "Chinese"
	isChineseSupported = true

building = false

getAllFiles = (path, exts, recursive = true) ->
	filters = Set exts
	files = if recursive
		Content\getAllFiles path
	else
		Content\getFiles path
	return for file in *files
		continue if not filters[Path\getExt file]
		file

getFileEntries = (path, recursive = true) ->
	entries = {}
	for file in *getAllFiles path, ["lua", "xml", yueext, "tl"], recursive
		entryName = Path\getName file
		entryAdded = false
		for [ename,] in *entries
			if entryName == ename
				entryAdded = true
				break
		continue if entryAdded
		fileName = Path\replaceExt file, ""
		fileName = Path path, fileName
		entry = [entryName, fileName]
		entries[] = entry
	table.sort entries, (a, b) -> a[1] < b[1]
	entries

getProjectEntries = (path) ->
	entries = []
	for dir in *Content\getDirs path
		continue if dir\match "^%."
		for file in *getAllFiles Path(path, dir), ["lua", "xml", yueext, "tl", "wasm"]
			if "init" == Path\getName(file)\lower!
				fileName = Path\replaceExt file, ""
				fileName = Path path, dir, fileName
				entryName = Path\getName Path\getPath fileName
				entryAdded = false
				for [ename,] in *entries
					if entryName == ename
						entryAdded = true
						break
				continue if entryAdded
				examples = []
				tests = []
				examplePath = Path path, dir, Path\getPath(file), "Example"
				if Content\exist examplePath
					for [name, ePath] in *getFileEntries examplePath
						entry = [name, Path path, dir, Path\getPath(file), ePath]
						examples[] = entry
				testPath = Path path, dir, Path\getPath(file), "Test"
				if Content\exist testPath
					for [name, tPath] in *getFileEntries testPath
						entry = [name, Path path, dir, Path\getPath(file), tPath]
						tests[] = entry
				entry = [entryName, fileName, examples, tests]
				bannerFile = Path path, Path\getPath(fileName), "Image", "banner.png"
				unless Content\exist bannerFile
					bannerFile = Path path, Path\getPath(fileName), "Image", "banner.jpg"
					bannerFile = nil unless Content\exist bannerFile
				if bannerFile then thread ->
					if Cache\loadAsync bannerFile
						bannerTex = Texture2D bannerFile
						if bannerTex
							entry[] = bannerFile
							entry[] = bannerTex
				entries[] = entry
	table.sort entries, (a, b) -> a[1] < b[1]
	entries

local gamesInDev, games
local doraTools, doraExamples, doraTests
local cppTests, cppTestSet
local allEntries

updateEntries = ->
	gamesInDev = getProjectEntries Content.writablePath
	games = getProjectEntries Path Content.assetPath, "Script"

	doraTools = getFileEntries Path(Content.assetPath, "Script", "Tools"), false
	doraExamples = getFileEntries Path Content.assetPath, "Script", "Example"
	doraTests = getFileEntries Path Content.assetPath, "Script", "Test"

	cppTests = []
	for name in *App.testNames
		entry = [name,]
		cppTests[] = entry
	cppTestSet = Set cppTests

	allEntries = []
	for game in *gamesInDev
		allEntries[] = game
		[_, _, examples, tests] = game
		for example in *examples
			allEntries[] = example
		for test in *tests
			allEntries[] = test
	for game in *games
		allEntries[] = game
		[_, _, examples, tests] = game
		for example in *examples
			doraExamples[] = example
		for test in *tests
			doraTests[] = test
	for group in *[
			doraExamples
			doraTests
			cppTests
		]
		for entry in *group
			allEntries[] = entry

updateEntries!

doCompile = (minify) ->
	return if building
	building = true
	startTime = App.runningTime
	luaFiles = []
	yueFiles = []
	xmlFiles = []
	tlFiles = []
	:writablePath = Content
	buildPaths = [
		[
			Path Content.assetPath
			Path writablePath, ".build"
			""
		],
	]
	for [_, entryFile] in *gamesInDev
		gamePath = Path\getPath Path\getRelative entryFile, writablePath
		buildPaths[] =
			* Path writablePath, gamePath
			* Path writablePath, ".build", gamePath
			* Path(writablePath, gamePath, "Script", "?.lua") .. ";" .. Path writablePath, gamePath, "?.lua"
			* gamePath
	for [inputPath, outputPath, searchPath, gamePath] in *buildPaths
		continue unless Content\exist inputPath

		for file in *getAllFiles inputPath, ["lua",]
			luaFiles[] =
				* file
				* Path inputPath, file
				* Path outputPath, file
				* gamePath

		for file in *getAllFiles inputPath, [yueext,]
			yueFiles[] =
				* file
				* Path inputPath, file
				* Path outputPath, Path\replaceExt file, "lua"
				* searchPath
				* gamePath

		for file in *getAllFiles inputPath, ["xml",]
			xmlFiles[] =
				* file
				* Path inputPath, file
				* Path outputPath, Path\replaceExt file, "lua"
				* gamePath

		for file in *getAllFiles inputPath, ["tl",]
			if not file\match ".*%.d%.tl$"
				tlFiles[] =
					* file
					* Path inputPath, file
					* Path outputPath, Path\replaceExt file, "lua"
					* searchPath
					* gamePath

	paths = {Path\getPath(file[3]), true \
		for files in *[luaFiles, yueFiles, xmlFiles, tlFiles] \
		for file in *files}

	Content\mkdir path for path in pairs paths

	totalFiles = #yueFiles + #xmlFiles + #tlFiles
	fileCount = 0
	errors = []
	for [file, input, output, searchPath, gamePath] in *yueFiles
		filename = if gamePath then Path gamePath, file else file
		(success) <- yue.compile input, output, searchPath, (codes, err, globals) ->
			if not codes
				errors[] = "Compile errors in #{filename}.\n#{err}"
				return
			success, result = LintYueGlobals codes, globals
			if success
				codes = codes\gsub "%s*local%s*_ENV%s*=%s*Dora%([^%)]-%)[^\n\r]+[\n\r%s]*", "\n"
				codes = codes\gsub "%s*local%s*_ENV%s*=%s*Dora[^%w_$][^\n\r]+[\n\r%s]*", "\n"
				codes = codes\gsub "^\n*", ""
				result ..= "\n" unless result == ""
				"-- [yue]: #{file}\n#{result}#{codes}"
			else
				if yueCodes := Content\load input
					globalErrors = []
					for [name, line, col] in *result
						countLine = 1
						code = ""
						for lineCode in yueCodes\gmatch "([^\r\n]*)\r?\n?"
							if countLine == line
								code = lineCode
								break
							countLine += 1
						globalErrors[] = "invalid global variable \"#{name}\"\nin \"#{filename}\", at line #{line}, col #{col}.\n#{code\gsub("\t", " ") .. '\n' .. string.rep(" ", col - 1) .. "^"}"
					errors[] = table.concat globalErrors, "\n"
				else
					errors[] = "failed to load file #{input}"
		print "Yue compiled: #{filename}" if success
		fileCount += 1

	thread ->
		for [file, input, output, gamePath] in *xmlFiles
			filename = if gamePath then Path gamePath, file else file
			sourceCodes = Content\loadAsync input
			codes, err = xml.tolua sourceCodes
			if not codes
				errors[] = "Compile errors in #{filename}.\n#{err}"
			else
				Content\saveAsync output, "-- [xml]: #{file}\n#{codes}"
				print "Xml compiled: #{filename}"
			fileCount += 1

	thread ->
		for [file, input, output, searchPath, gamePath] in *tlFiles
			filename = if gamePath then Path gamePath, file else file
			sourceCodes = Content\loadAsync input
			codes, err = teal.toluaAsync sourceCodes, file, searchPath
			if not codes
				errors[] = "Compile errors in #{filename}.\n#{err}"
			else
				Content\saveAsync output, codes
				print "Teal compiled: #{filename}"
			fileCount += 1

	thread ->
		wait -> fileCount == totalFiles
		if minify
			for files in *[yueFiles, xmlFiles, tlFiles] do for file in *files
				output = Path\replaceExt file[3], "lua"
				luaFiles[] =
					* Path\replaceExt file[1], "lua"
					* output
					* output

			from "luaminify" import FormatMini
			for [file, input, output] in *luaFiles
				if Content\exist input
					sourceCodes = Content\loadAsync input
					res, err = FormatMini sourceCodes
					if res
						Content\saveAsync output, res
						print "Minify: #{file}"
					else
						errors[] = "Minify errors in #{file}.\n#{err}"
				else
					errors[] = "Minify errors in #{file}.\nTarget file is not exist!"
			package.loaded["luaminify.FormatMini"] = nil
			package.loaded["luaminify.ParseLua"] = nil
			package.loaded["luaminify.Scope"] = nil
			package.loaded["luaminify.Util"] = nil
		errorMessage = table.concat errors, "\n"
		print "\n" .. errorMessage if errorMessage ~= ""
		builtFiles = totalFiles + (minify and #luaFiles or 0) - #errors
		print "\n#{builtFiles} #{builtFiles == 1 and 'file' or 'files'} built! Cost #{string.format '%.2f', App.runningTime - startTime}s"
		print "#{#errors} #{#errors == 1 and 'file fails' or 'files fail'} to build."
		Content\clearPathCache!
		teal.clear!
		yue.clear!
		building = false

doClean = ->
	return if building
	:writablePath = Content
	targetDir = Path writablePath, ".build"
	Content\clearPathCache!
	if Content\remove targetDir
		print "Cleaned: #{targetDir}"
	Content\remove Path writablePath, ".upload"
	Content\remove Path writablePath, ".download"

screenScale = 2.0 -- App.devicePixelRatio
scaleContent = false
isInEntry = true
currentEntry = nil

footerWindow = nil
entryWindow = nil

setupEventHandlers = nil

export allClear = ->
	for routine in *Routine
		switch routine
			when footerWindow, entryWindow
				continue
			else
				Routine\remove routine
	for module in *moduleCache
		package.loaded[module] = nil
	moduleCache = []
	Director\cleanup!
	Cache\unload!
	Entity\clear!
	Platformer.Data\clear!
	Platformer.UnitAction\clear!
	Audio\stopStream 0.5
	Struct\clear!
	View.postEffect = nil
	View.scale = scaleContent and screenScale or 1
	Director.clearColor = Color 0xff1a1a1a
	teal.clear!
	yue.clear!
	for _, item in pairs ubox!
		node\cleanup! if node := tolua.cast item, "Node"
	collectgarbage!
	collectgarbage!
	setupEventHandlers!
	Content.searchPaths = searchPaths
	App.idled = true
	Wasm\clear!

setupEventHandlers = ->
	with Director.postNode
		\gslot "AppQuit", allClear
		\gslot "AppTheme", (argb) ->
			config.themeColor = argb
		\gslot "AppLocale", (locale) ->
			config.locale = locale
			updateLocale!
			teal.clear true
		\gslot "AppWSClose", ->
			if HttpServer.wsConnectionCount == 0
				updateEntries!
		switch App.platform when "Linux", "Windows", "macOS"
			\gslot "AppSizeChanged", ->
				:width, :height = App.winSize
				config.winWidth = width
				config.winHeight = height
			\gslot "AppFullScreen", (fullScreen) ->
				config.fullScreen = fullScreen
			\gslot "AppMoved", ->
				x: config.winX, y: config.winY = App.winPosition

setupEventHandlers!

export stop = ->
	return false if isInEntry
	allClear!
	isInEntry = true
	currentEntry = nil
	true

export enterEntryAsync = (entry) ->
	isInEntry = false
	App.idled = false
	emit Profiler.EventName, "ClearLoader"
	currentEntry = entry
	[name, file] = entry
	if cppTestSet[entry]
		if App\runTest name
			return true
		else
			return false, "failed to run cpp test '#{name}'"
	sleep!
	try
		scriptPath = Path\getPath file
		Content\insertSearchPath 1, scriptPath
		scriptPath = Path scriptPath, "Script"
		if Content\exist scriptPath
			Content\insertSearchPath 1, scriptPath
		result = require file
		result! if "function" == type result
		nil
	catch msg
		err = debug.traceback msg
		allClear!
		print err
		import "UI.Control.Basic.ScrollArea"
		width: viewWidth, height: viewHeight = View.size
		width, height = viewWidth - 20, viewHeight - 20
		fontSize = math.floor 20 * App.devicePixelRatio
		Director.ui\addChild with root = AlignNode!
			:width, :height = App.bufferSize
			\css "width: #{width}; height: #{height}"
			\gslot "AppSizeChanged", ->
				:width, :height = App.bufferSize
				\css "width: #{width}; height: #{height}"
			\addChild with ScrollArea {
					:width
					:height
					paddingX: 0
					paddingY: 50
					viewWidth: height
					viewHeight: height
				}
				root\slot "AlignLayout", (w, h) ->
					.position = Vec2 w / 2, h / 2
					w -= 20
					h -= 20
					.view.children.first.textWidth = w - fontSize
					\adjustSizeWithAlign "Auto", 10, Size w, h
				.view\addChild with label = Label "sarasa-mono-sc-regular", fontSize
					.alignment = "Left"
					.textWidth = width - fontSize
					.text = err
		return err

enterDemoEntry = (entry) -> thread -> enterEntryAsync entry

reloadCurrentEntry = ->
	if currentEntry
		allClear!
		enterDemoEntry currentEntry

Director.clearColor = Color 0xff1a1a1a

waitForWebStart = true
thread ->
	sleep 2
	waitForWebStart = false

reloadDevEntry = -> thread ->
	waitForWebStart = true
	doClean!
	allClear!
	_G.require = oldRequire
	Dora.require = oldRequire
	package.loaded["Script.Dev.Entry"] = nil
	Director.systemScheduler\schedule ->
		Routine\clear!
		oldRequire "Script.Dev.Entry"
		true

isOSSLicenseExist = Content\exist "LICENSES"
ossLicenses = nil
ossLicenseOpen = false

extraOperations = ->
	zh = useChinese and isChineseSupported
	if isOSSLicenseExist
		if Button zh and '开源协议' or 'OSS Licenses'
			unless ossLicenses
				ossLicenses = []
				licenseText = Content\load "LICENSES"
				if ossLicenseOpen := licenseText?
					licenseText = licenseText\gsub "\r\n", "\n"
					for license in GSplit licenseText, "\n--------\n", true
						if name, text := license\match "[%s\n]*([^\n]*)[\n]*(.*)"
							ossLicenses[] = [name, text]
			else
				ossLicenseOpen = true
		if ossLicenseOpen
			visualSize: {:width, :height}, :themeColor = App
			SetNextWindowPosCenter $SetCond(Appearing), Vec2 0.5, 0.5
			SetNextWindowSize Vec2(math.min(width * 0.8, 750), height * 0.8), $SetCond Appearing
			PushStyleVar "WindowPadding", Vec2(20, 10), -> ossLicenseOpen = Begin(
				zh and '开源协议' or 'OSS Licenses'
				ossLicenseOpen
				["NoSavedSettings",]
				-> for [firstLine, text] in *ossLicenses
					name, license = firstLine\match "(.+): (.+)"
					TextColored themeColor, name
					SameLine!
					TreeNode "#{license}####{name}", -> TextWrapped text
			)
	return unless App.debugging
	<- TreeNode zh and "开发操作" or "Development"
	OpenPopup "build" if Button zh and "脚本编译测试" or "Script Build Test"
	PushStyleVar "WindowPadding", Vec2(10, 10), -> BeginPopup "build", ->
		doCompile false if Selectable zh and "编译" or "Compile"
		Separator!
		doCompile true if Selectable zh and "压缩" or "Minify"
		Separator!
		doClean! if Selectable zh and "清理" or "Clean"
	if isInEntry
		if waitForWebStart
			BeginDisabled -> Button zh and "重载开发程序(Ctrl+Z)" or "Reload Dev Entry(Ctrl+Z)"
		elseif Button zh and "重载开发程序(Ctrl+Z)" or "Reload Dev Entry(Ctrl+Z)"
			reloadDevEntry!
	if changed, scaleContent := Checkbox string.format("%.1fx #{zh and '屏幕缩放' or 'Screen'}", screenScale), scaleContent
		View.scale = scaleContent and screenScale or 1
	if changed, engineDev := Checkbox zh and '引擎开发模式' or 'Engine Dev Mode', engineDev
		config.engineDev = engineDev

transparant = Color 0x0
windowFlags = $WindowFlag(
	NoTitleBar
	NoResize
	NoMove
	NoCollapse
	NoSavedSettings
	NoBringToFrontOnFocus
)
initFooter = true
footerWindow = threadLoop ->
	zh = useChinese and isChineseSupported
	if HttpServer.wsConnectionCount > 0
		return
	if Keyboard\isKeyDown "Escape"
		allClear!
		App\shutdown!
	do
		ctrl = Keyboard\isKeyPressed "LCtrl"
		if ctrl and Keyboard\isKeyDown "Q"
			stop!
		if ctrl and Keyboard\isKeyDown "Z"
			reloadCurrentEntry!
		if ctrl and Keyboard\isKeyDown ","
			showStats = if showFooter then not showStats else true
			showFooter = true
			config.showFooter = showFooter
			config.showStats = showStats
		if ctrl and Keyboard\isKeyDown "."
			showConsole = if showFooter then not showConsole else true
			showFooter = true
			config.showFooter = showFooter
			config.showConsole = showConsole
		if ctrl and Keyboard\isKeyDown "/"
			showFooter = not showFooter
			config.showFooter = showFooter
		left = ctrl and Keyboard\isKeyDown "Left"
		right = ctrl and Keyboard\isKeyDown "Right"
		currentIndex = nil
		for i, entry in ipairs allEntries
			if currentEntry == entry
				currentIndex = i
		if left
			allClear!
			currentIndex ??= #allEntries + 1
			enterDemoEntry if currentIndex > 1
				allEntries[currentIndex - 1]
			else
				allEntries[#allEntries]
		if right
			allClear!
			currentIndex ??= 0
			enterDemoEntry if currentIndex < #allEntries
				allEntries[currentIndex + 1]
			else
				allEntries[1]
	return unless showEntry

	:width, :height = App.visualSize
	SetNextWindowSize Vec2 50, 50
	SetNextWindowPos Vec2 width - 50, height - 50
	PushStyleColor "WindowBg", transparant, -> Begin "Show", windowFlags, ->
		if isInEntry or width >= 540
			if changed, showFooter := Checkbox "##dev", showFooter
				config.showFooter = showFooter

	if isInEntry and
		not waitForWebStart and
		Keyboard\isKeyPressed("LCtrl") and
		Keyboard\isKeyDown "Z"
		reloadDevEntry!
	if initFooter
		initFooter = false
	else
		return unless showFooter

	SetNextWindowSize Vec2 width, 50
	SetNextWindowPos Vec2 0, height - 50
	SetNextWindowBgAlpha 0.35
	PushStyleVar "WindowPadding", Vec2(10, 0), -> Begin "Footer", windowFlags, ->
		Dummy Vec2 width - 20, 0
		if changed, showStats := Checkbox zh and "状态" or "Stats", showStats
			config.showStats = showStats
		SameLine!
		if changed, showConsole := Checkbox zh and "控制台" or "Log", showConsole
			config.showConsole = showConsole
		if config.updateNotification
			SameLine!
			if ImGui.Button zh and "更新可用" or "Update Available"
				config.updateNotification = false
				enterDemoEntry ["SelfUpdater", Path Content.assetPath, "Script", "Tools", "SelfUpdater"]
		unless isInEntry
			SameLine!
			if Button zh and "主页" or "Home", Vec2 70, 30
				allClear!
				isInEntry = true
				currentEntry = nil
			currentIndex = nil
			for i, entry in ipairs allEntries
				if currentEntry == entry
					currentIndex = i
			if currentIndex
				if currentIndex > 1
					SameLine!
					if Button zh and "前一个" or "Prev", Vec2 70, 30
						allClear!
						enterDemoEntry allEntries[currentIndex - 1]
				if currentIndex < #allEntries
					SameLine!
					if Button zh and "后一个" or "Next", Vec2 70, 30
						allClear!
						enterDemoEntry allEntries[currentIndex + 1]
			SameLine!
			if Button zh and "刷新" or "Reload", Vec2 70, 30
				reloadCurrentEntry!
		PushStyleVar "WindowPadding", Vec2(10, 10), ->
			if showStats
				SetNextWindowPos Vec2(10, 50), $SetCond FirstUseEver
				showStats = ShowStats showStats, extraOperations
				config.showStats = showStats
			if showConsole
				SetNextWindowPos Vec2(width - 425, height - 375), $SetCond FirstUseEver
				showConsole = ShowConsole showConsole
				config.showConsole = showConsole

const MaxWidth = 800

displayWindowFlags = $WindowFlag(
	NoDecoration
	NoSavedSettings
	NoFocusOnAppearing
	NoNav
	NoMove
	NoScrollWithMouse
	AlwaysAutoResize
	NoBringToFrontOnFocus
)

webStatus = nil
descColor = Color 0xffa1a1a1
gameOpen = #gamesInDev == 0
toolOpen = false
exampleOpen = false
testOpen = false
filterText = nil
anyEntryMatched = false
urlClicked = nil
match = (name) ->
	res = not filterText or name\lower!\match filterText
	anyEntryMatched = true if res
	res
iconTex = nil
thread ->
	if Cache\loadAsync "Image/icon_s.png"
		iconTex = Texture2D "Image/icon_s.png"

entryWindow = threadLoop ->
	if App.fpsLimited ~= config.fpsLimited
		config.fpsLimited = App.fpsLimited
	if App.targetFPS ~= config.targetFPS
		config.targetFPS = App.targetFPS
	if View.vsync ~= config.vsync
		config.vsync = View.vsync
	if Director.scheduler.fixedFPS ~= config.fixedFPS
		config.fixedFPS = Director.scheduler.fixedFPS
	if Director.profilerSending ~= config.webProfiler
		config.webProfiler = Director.profilerSending
	if urlClicked
		_, result = coroutine.resume urlClicked
		if result
			coroutine.close urlClicked
			urlClicked = nil
	return unless showEntry
	return unless isInEntry
	zh = useChinese and isChineseSupported
	if HttpServer.wsConnectionCount > 0
		:themeColor = App
		:width, :height = App.visualSize
		SetNextWindowBgAlpha 0.5
		SetNextWindowPos Vec2(width / 2, height / 2), $SetCond(Always), Vec2 0.5, 0.5
		Begin "Web IDE Connected", displayWindowFlags, ->
			Separator!
			TextColored themeColor, "#{zh and '网页 IDE 已连接 ……' or 'Web IDE connected ...'}"
			if iconTex
				Image "Image/icon_s.png", Vec2 24, 24
				SameLine!
			slogon = zh and 'Dora 启动！' or 'Dora Start!'
			TextColored descColor, slogon
			Separator!
		return

	:themeColor = App
	width: fullWidth, :height = App.visualSize

	SetNextWindowBgAlpha 0.85
	SetNextWindowPos Vec2(fullWidth - 30, height - 130), $SetCond(Always), Vec2 1, 0
	PushStyleVar "WindowPadding", Vec2(10, 5), ->
		Begin "Web IDE", displayWindowFlags, ->
			Separator!
			TextColored themeColor, "#{zh and '网页' or 'Web'} IDE"
			SameLine!
			TextDisabled '(?)'
			if IsItemHovered!
				BeginTooltip ->
					PushTextWrapPos 280, ->
						Text zh and '在本机或是本地局域网连接的其他设备上，使用浏览器访问下面这个地址来使用网页 IDE' or 'You can use the Web IDE by accessing the following address in a browser on this machine or other devices connected to the local network'
			if url := webStatus?.url
				if isDesktop and not config.fullScreen
					if urlClicked
						BeginDisabled -> Button url
					elseif Button url
						urlClicked = once -> sleep 5
						App\openURL "http://localhost:8866"
				else
					TextColored descColor, url
			else
				TextColored descColor, zh and '不可用' or 'not available'
			Separator!

	width = math.min MaxWidth, fullWidth
	paddingX = math.max 10, fullWidth / 2 - width / 2 - 10
	maxColumns = math.max math.floor(width / 200), 1
	SetNextWindowPos Vec2.zero
	SetNextWindowBgAlpha 0
	PushStyleVar "WindowPadding", Vec2(10, 0), ->
		Begin "Dora Dev", displayWindowFlags, ->
			Dummy Vec2 fullWidth - 20, 0
			if iconTex
				Image "Image/icon_s.png", Vec2 24, 24
				SameLine!
			TextColored themeColor, "DORA SSR #{zh and '开发' or 'DEV'}"
			SameLine!
			if fullWidth >= 360
				Dummy Vec2 fullWidth - 360, 0
				SameLine!
				SetNextItemWidth -50
				if InputText zh and '筛选' or 'Filter', filterBuf, ["AutoSelectAll",]
					config.filter = filterBuf.text
			Separator!
			Dummy Vec2 fullWidth - 20, 0

	anyEntryMatched = false
	SetNextWindowPos Vec2 0, 50
	SetNextWindowSize Vec2 fullWidth, height - 100
	PushStyleColor "WindowBg", transparant, -> PushStyleVar "WindowPadding", Vec2(paddingX, 10), ->
		Begin "Content", windowFlags, ->
			filterText = filterBuf.text\match "[^%%%.%[]+"
			filterText = filterText\lower! if filterText
			if #gamesInDev > 0
				for game in *gamesInDev
					[gameName, fileName, examples, tests, bannerFile, bannerTex] = game
					showSep = false
					if match gameName
						Columns 1, false
						TextColored themeColor, zh and "项目：" or "Project:"
						SameLine!
						Text gameName
						Separator!
						if bannerFile
							width: texWidth, height: texHeight = bannerTex
							displayWidth = (fullWidth / 2 - paddingX) * 2 - 35
							const sizing = 0.8
							texHeight = displayWidth * sizing * texHeight / texWidth
							texWidth = displayWidth * sizing
							padding = displayWidth * (1 - sizing) / 2 - 10
							Dummy Vec2 padding, 0
							SameLine!
							<- PushID fileName
							if ImageButton gameName, bannerFile, Vec2 texWidth, texHeight
								enterDemoEntry game
						else
							<- PushID fileName
							if Button zh and "开始运行" or "Game Start", Vec2 -1, 40
								enterDemoEntry game
						NextColumn!
						showSep = true
					if #examples > 0
						showExample = false
						for example in *examples
							if match example[1]
								showExample = true
								break
						if showExample
							Columns 1, false
							TextColored themeColor, zh and "示例：" or "Example:"
							SameLine!
							Text gameName
							<- PushStyleVar "ItemSpacing", Vec2 20, 10
							Columns maxColumns, false
							for example in *examples
								continue unless match example[1]
								PushID "#{gameName} #{example[1]} example", ->
									if Button example[1], Vec2 -1, 40
										enterDemoEntry example
									NextColumn!
								showSep = true
					if #tests > 0
						showTest = false
						for test in *tests
							if match test[1]
								showTest = true
								break
						if showTest
							Columns 1, false
							TextColored themeColor, zh and "测试：" or "Test:"
							SameLine!
							Text gameName
							<- PushStyleVar "ItemSpacing", Vec2 20, 10
							Columns maxColumns, false
							for test in *tests
								continue unless match test[1]
								PushID "#{gameName} #{test[1]} test", ->
									if Button test[1], Vec2 -1, 40
										enterDemoEntry test
									NextColumn!
								showSep = true
					if showSep
						Columns 1, false
						Separator!
			if #games > 0 or #doraExamples > 0 or #doraTests > 0
				showGame = false
				for [name,] in *games
					showGame = true if match name
				showTool = false
				for [name,] in *doraTools
					showTool = true if match name
				showExample = false
				for [name,] in *doraExamples
					showExample = true if match name
				showTest = false
				for [name,] in *doraTests
					showTest = true if match name
				for [name,] in *cppTests
					showTest = true if match name
				goto endEntry unless showGame or showTool or showExample or showTest
				Columns 1, false
				TextColored themeColor, "Dora SSR:"
				SameLine!
				Text zh and "开发示例" or "Development Showcase"
				Separator!
				const demoViewWith = 400
				if #games > 0 and showGame
					opened = if filterText? then showGame else false
					SetNextItemOpen gameOpen
					TreeNode zh and "游戏演示" or "Game Demo", ->
						columns = math.max math.floor(width / demoViewWith), 1
						Columns columns, false
						for game in *games
							continue unless match game[1]
							[gameName, fileName, _, _, bannerFile, bannerTex] = game
							if columns > 1
								if bannerFile
									width: texWidth, height: texHeight = bannerTex
									const displayWidth = demoViewWith - 40
									texHeight = displayWidth * texHeight / texWidth
									texWidth = displayWidth
									Text gameName
									<- PushID fileName
									if ImageButton gameName, bannerFile, Vec2 texWidth, texHeight
										enterDemoEntry game
								else
									<- PushID fileName
									if Button gameName, Vec2 -1, 40
										enterDemoEntry game
							else
								if bannerFile
									width: texWidth, height: texHeight = bannerTex
									displayWidth = (fullWidth / 2 - paddingX) * 2 - 35
									sizing = 0.8
									texHeight = displayWidth * sizing * texHeight / texWidth
									texWidth = displayWidth * sizing
									if texWidth > 500
										sizing = 0.6
										texHeight = displayWidth * sizing * texHeight / texWidth
										texWidth = displayWidth * sizing
									padding = displayWidth * (1 - sizing) / 2 - 10
									Dummy Vec2 padding, 0
									SameLine!
									Text gameName
									Dummy Vec2 padding, 0
									SameLine!
									<- PushID fileName
									if ImageButton gameName, bannerFile, Vec2 texWidth, texHeight
										enterDemoEntry game
								else
									<- PushID fileName
									if Button gameName, Vec2 -1, 40
										enterDemoEntry game
							NextColumn!
						Columns 1, false
						opened = true
					gameOpen = opened
				if #doraTools > 0 and showTool
					opened = if filterText? then showTool else false
					SetNextItemOpen toolOpen
					TreeNode zh and "引擎工具" or "Engine Tools", ->
						<- PushStyleVar "ItemSpacing", Vec2 20, 10
						Columns maxColumns, false
						for example in *doraTools
							continue unless match example[1]
							if Button example[1], Vec2 -1, 40
								enterDemoEntry example
							NextColumn!
						Columns 1, false
						opened = true
					toolOpen = opened
				if #doraExamples > 0 and showExample
					opened = if filterText? then showExample else false
					SetNextItemOpen exampleOpen
					TreeNode zh and "引擎示例" or "Engine Example", ->
						<- PushStyleVar "ItemSpacing", Vec2 20, 10
						Columns maxColumns, false
						for example in *doraExamples
							continue unless match example[1]
							if Button example[1], Vec2 -1, 40
								enterDemoEntry example
							NextColumn!
						Columns 1, false
						opened = true
					exampleOpen = opened
				if (#doraTests > 0 or #cppTests > 0) and showTest
					opened = if filterText? then showTest else false
					SetNextItemOpen testOpen
					TreeNode zh and "引擎测试" or "Engine Test", ->
						<- PushStyleVar "ItemSpacing", Vec2 20, 10
						Columns maxColumns, false
						for test in *doraTests
							continue unless match test[1]
							if Button test[1], Vec2 -1, 40
								enterDemoEntry test
							NextColumn!
						for test in *cppTests
							continue unless match test[1]
							if Button test[1], Vec2 -1, 40
								enterDemoEntry test
							NextColumn!
						opened = true
					testOpen = opened
			::endEntry::
			unless anyEntryMatched
				SetNextWindowBgAlpha 0
				SetNextWindowPos Vec2(fullWidth / 2, height / 2), $SetCond(Always), Vec2 0.5, 0.5
				Begin "Entries Not Found", displayWindowFlags, ->
					Separator!
					TextColored themeColor, zh and "多萝：" or "Dora:"
					TextColored descColor, zh and '别担心，改变一些咒语，我们会找到新的冒险～' or 'Don\'t worry, more magic words and we\'ll find a new adventure!'
					Separator!
			Columns 1, false
			Dummy Vec2 100, 80
			ScrollWhenDraggingOnVoid!

webStatus = require "Script.Dev.WebServer"

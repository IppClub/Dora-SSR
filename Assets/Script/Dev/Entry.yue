_ENV = Dora dora.ImGui

App.idled = true

moduleCache = []
oldRequire = _G.require
require = (path)->
	loaded = package.loaded[path]
	if loaded == nil
		moduleCache[] = path
		return oldRequire path
	loaded
_G.require = require
dora.require = require

:searchPaths = Content

runningPaths =
	* Path Content.writablePath, ".build", "Script", "Lib"
	* Path Content.writablePath, ".build", "Script"
	* Path Content.writablePath, ".build"

useChinese = App.locale\match("^zh")?
updateLocale = ->
	useChinese = App.locale\match("^zh")?
	searchPaths[#searchPaths] = Path Content.assetPath, "Script", "Lib", "Dora", useChinese and "zh-Hans" or "en"
	Content.searchPaths = searchPaths

if DB\exist "Config"
	switch DB\query "select value_str from Config where name = 'locale'"
		when [ [locale,], ] then if App.locale ~= locale
			App.locale = locale
			updateLocale!

import "Config"
config = Config(
	""
	"fpsLimited"
	"targetFPS"
	"fixedFPS"
	"vsync"
	"fullScreen"
	"winX"
	"winY"
	"winWidth"
	"winHeight"
	"themeColor"
	"locale"
	"editingInfo"
	"showStats"
	"showConsole"
	"showFooter"
	"filter"
)
config\load!
if config.fpsLimited?
	App.fpsLimited = config.fpsLimited == 1
else
	config.fpsLimited = App.fpsLimited and 1 or 0

if config.targetFPS?
	App.targetFPS = config.targetFPS
else
	config.targetFPS = App.targetFPS

if config.vsync?
	View.vsync = config.vsync == 1
else
	config.vsync = View.vsync and 1 or 0

if config.fixedFPS?
	Director.scheduler.fixedFPS = config.fixedFPS
else
	config.fixedFPS = Director.scheduler.fixedFPS

showEntry = true

if App.platform in ["Linux", "Windows", "macOS"]
	if config.fullScreen? and config.fullScreen == 1
		App.winSize = Size.zero
	elseif config.winWidth? and config.winHeight?
		size = Size config.winWidth, config.winHeight
		if App.winSize ~= size
			App.winSize = size
			showEntry = false
			thread ->
				sleep!
				sleep!
				showEntry = true
		x: winX, y: winY = App.winPosition
		if config.winX?
			winX = config.winX
		else
			config.winX = 0
		if config.winY?
			winY = config.winY
		else
			config.winY = 0
		App.winPosition = Vec2 winX, winY

if config.themeColor?
	App.themeColor = Color config.themeColor
else
	config.themeColor = App.themeColor\toARGB!

if not config.locale?
	config.locale = App.locale

showStats = false
if config.showStats?
	showStats = config.showStats > 0
else
	config.showStats = showStats and 1 or 0

showConsole = true
if config.showConsole?
	showConsole = config.showConsole > 0
else
	config.showConsole = showConsole and 1 or 0

showFooter = true
if config.showFooter?
	showFooter = config.showFooter > 0
else
	config.showFooter = showFooter and 1 or 0

filterBuf = Buffer 20
if config.filter?
	filterBuf\setString config.filter
else
	config.filter = ""

export.getConfig = -> config

from "Utils" import Set, Struct, LintYueGlobals, GSplit
options: {extension: yueext} = yue

isChineseSupported = IsFontLoaded!
unless isChineseSupported
	<- LoadFontTTF "Font/sarasa-mono-sc-regular.ttf", 20, "Chinese"
	isChineseSupported = true

building = false

getAllFiles = (path, exts)->
	filters = Set exts
	return for file in *Content\getAllFiles path
		continue if not filters[Path\getExt file]
		file

getFileEntries = (path)->
	entries = {}
	for file in *getAllFiles path, ["xml", "lua", yueext, "tl"]
		entryName = Path\getName file
		file = Path\replaceExt file, ""
		file = Path Path\getName(path), file
		entry = [entryName, file]
		entries[] = entry
	table.sort entries, (a, b)-> a[1] < b[1]
	entries

getProjectEntries = (path)->
	entries = []
	for dir in *Content\getDirs path
		continue if dir\match "^%."
		for file in *getAllFiles Path(path, dir), ["xml", "lua", yueext, "tl", "wasm"]
			if "init" == Path\getName(file)\lower!
				examples = []
				tests = []
				examplePath = Path path, dir, Path\getPath(file), "Example"
				if Content\exist examplePath
					for [name, ePath] in *getFileEntries examplePath
						entry = [name, Path(dir, Path\getPath(file), ePath)]
						examples[] = entry
				testPath = Path path, dir, Path\getPath(file), "Test"
				if Content\exist testPath
					for [name, tPath] in *getFileEntries testPath
						entry = [name, Path(dir, Path\getPath(file), tPath)]
						tests[] = entry
				file = Path\replaceExt file, ""
				file = Path dir, file
				entryName = Path\getName Path\getPath file
				entry = [entryName, file, examples, tests]
				entries[] = entry
	table.sort entries, (a, b)-> a[1] < b[1]
	entries

local gamesInDev, games
local doraExamples, doraTests
local cppTests, cppTestSet
local allEntries

updateEntries = ->
	gamesInDev = getProjectEntries Content.writablePath
	games = getProjectEntries Path Content.assetPath, "Script"

	doraExamples = getFileEntries Path Content.assetPath, "Script", "Example"
	doraTests = getFileEntries Path Content.assetPath, "Script", "Test"

	cppTests = []
	for name in *App.testNames
		entry = [name,]
		cppTests[] = entry
	cppTestSet = Set cppTests

	allEntries = []
	for game in *gamesInDev
		allEntries[] = game
		[_, _, examples, tests] = game
		for example in *examples
			allEntries[] = example
		for test in *tests
			allEntries[] = test
	for game in *games
		allEntries[] = game
		[_, _, examples, tests] = game
		for example in *examples
			doraExamples[] = example
		for test in *tests
			doraTests[] = test
	for group in *[
			doraExamples
			doraTests
			cppTests
		]
		for entry in *group
			allEntries[] = entry

updateEntries!

doCompile = (minify)->
	return if building
	building = true
	startTime = App.runningTime
	luaFiles = []
	yueFiles = []
	xmlFiles = []
	tlFiles = []
	:writablePath = Content
	buildPaths = [
		[
			Path Content.assetPath
			Path writablePath, ".build"
			""
		],
	]
	for [name, entryFile] in *gamesInDev
		gamePath = Path\getPath entryFile
		buildPaths[] =
			* Path writablePath, gamePath
			* Path writablePath, ".build", gamePath
			* Path(writablePath, gamePath, "Script", "?.lua") .. ";" .. Path writablePath, gamePath, "?.lua"
	for [inputPath, outputPath, searchPath] in *buildPaths
		continue unless Content\exist inputPath

		for file in *getAllFiles inputPath, ["lua",]
			luaFiles[] =
				* file
				* Path inputPath, file
				* Path outputPath, file

		for file in *getAllFiles inputPath, [yueext,]
			yueFiles[] =
				* file
				* Path inputPath, file
				* Path outputPath, Path\replaceExt file, "lua"
				* searchPath

		for file in *getAllFiles inputPath, ["xml",]
			xmlFiles[] =
				* file
				* Path inputPath, file
				* Path outputPath, Path\replaceExt file, "lua"

		for file in *getAllFiles inputPath, ["tl",]
			if not file\match ".*%.d%.tl$"
				tlFiles[] =
					* file
					* Path inputPath, file
					* Path outputPath, Path\replaceExt file, "lua"
					* searchPath

	paths = {Path\getPath(file[3]), true \
		for files in *[luaFiles, yueFiles, xmlFiles, tlFiles] \
		for file in *files}

	Content\mkdir path for path in pairs paths

	totalFiles = #yueFiles + #xmlFiles + #tlFiles
	fileCount = 0
	errors = []
	for [file, input, output, searchPath] in *yueFiles
		(success) <- yue.compile input, output, searchPath, (codes, err, globals)->
			if not codes
				errors[] = "Compile errors in #{file}.\n#{err}"
				return
			success, result = LintYueGlobals codes, globals
			if success
				codes = codes\gsub "%s*local%s*_ENV%s*=%s*Dora%([^%)]-%)[^\n\r]+[\n\r%s]*", "\n"
				result ..= "\n" unless result == ""
				"-- [yue]: #{file}\n#{result}" .. codes
			else
				if yueCodes := Content\load input
					globalErrors = []
					for [name, line, col] in *result
						countLine = 1
						code = ""
						for lineCode in yueCodes\gmatch "([^\r\n]*)\r?\n?"
							if countLine == line
								code = lineCode
								break
							countLine += 1
						globalErrors[] = "invalid global variable \"#{name}\"\nin \"#{file}\", at line #{line}, col #{col}.\n#{code\gsub("\t", " ") .. '\n' .. string.rep(" ", col - 1) .. "^"}"
					errors[] = table.concat globalErrors, "\n"
				else
					errors[] = "failed to load file #{input}"
		print "Yue compiled: #{file}" if success
		fileCount += 1

	thread ->
		for [file, input, output] in *xmlFiles
			sourceCodes = Content\loadAsync input
			codes, err = xml.tolua sourceCodes
			if not codes
				errors[] = "Compile errors in #{file}.\n#{err}"
			else
				Content\saveAsync output, "-- [xml]: #{file}\n#{codes}"
				print "Xml compiled: #{file}"
			fileCount += 1

	thread ->
		for [file, input, output, searchPath] in *tlFiles
			sourceCodes = Content\loadAsync input
			codes, err = teal.toluaAsync sourceCodes, file, searchPath
			if not codes
				errors[] = "Compile errors in #{file}.\n#{err}"
			else
				Content\saveAsync output, codes
				print "Teal compiled: #{file}"
			fileCount += 1

	thread ->
		wait -> fileCount == totalFiles
		if minify
			for files in *[yueFiles, xmlFiles, tlFiles] do for file in *files
				output = Path\replaceExt file[3], "lua"
				luaFiles[] =
					* Path\replaceExt file[1], "lua"
					* output
					* output

			from "luaminify" import FormatMini
			for [file, input, output] in *luaFiles
				if Content\exist input
					sourceCodes = Content\loadAsync input
					res, err = FormatMini sourceCodes
					if res
						Content\saveAsync output, res
						print "Minify: #{file}"
					else
						errors[] = "Minify errors in #{file}.\n#{err}"
				else
					errors[] = "Minify errors in #{file}.\nTarget file is not exist!"
			package.loaded["luaminify.FormatMini"] = nil
			package.loaded["luaminify.ParseLua"] = nil
			package.loaded["luaminify.Scope"] = nil
			package.loaded["luaminify.Util"] = nil
		errorMessage = table.concat errors, "\n"
		print "\n" .. errorMessage if errorMessage ~= ""
		builtFiles = totalFiles + (minify and #luaFiles or 0) - #errors
		print "\n#{builtFiles} #{builtFiles == 1 and 'file' or 'files'} built! Cost #{string.format '%.2f', App.runningTime - startTime}s"
		print "#{#errors} #{#errors == 1 and 'file fails' or 'files fail'} to build."
		Content\clearPathCache!
		teal.clear!
		yue.clear!
		building = false

doClean = ->
	return if building
	:writablePath = Content
	targetDir = Path writablePath, ".build"
	Content\clearPathCache!
	if Content\remove targetDir
		print "Cleaned: #{targetDir}"
	Content\remove Path writablePath, ".upload"
	Content\remove Path writablePath, ".download"

screenScale = 2.0 -- App.devicePixelRatio
scaleContent = false
isInEntry = true
currentEntry = nil

footerWindow = nil
entryWindow = nil

setupEventHandlers = ->
	with Director.postNode
		\gslot "AppTheme", (argb)->
			config.themeColor = argb
		\gslot "AppLocale", (locale)->
			config.locale = locale
			updateLocale!
			teal.clear true
		\gslot "AppWSClose", ->
			if HttpServer.wsConnectionCount == 0
				updateEntries!
		switch App.platform when "Linux", "Windows", "macOS"
			\gslot "AppSizeChanged", ->
				:width, :height = App.winSize
				config.winWidth = width
				config.winHeight = height
			\gslot "AppFullScreen", (fullScreen)->
				config.fullScreen = fullScreen and 1 or 0
			\gslot "AppMoved", ->
				x: config.winX, y: config.winY = App.winPosition

setupEventHandlers!

export allClear = ->
	for routine in *Routine
		switch routine
			when footerWindow, entryWindow
				continue
			else
				Routine\remove routine
	for module in *moduleCache
		package.loaded[module] = nil
	moduleCache = []
	Director\cleanup!
	Cache\unload!
	Entity\clear!
	Platformer.Data\clear!
	Platformer.UnitAction\clear!
	Audio\stopStream 0.2
	Struct\clear!
	View.postEffect = nil
	View.scale = scaleContent and screenScale or 1
	Director.clearColor = Color 0xff1a1a1a
	teal.clear!
	yue.clear!
	for _, item in pairs ubox!
		node\cleanup! if node := tolua.cast item, "Node"
	collectgarbage!
	collectgarbage!
	setupEventHandlers!
	Content.searchPaths = searchPaths
	App.idled = true
	Wasm\clear!

export stop = ->
	return false if isInEntry
	allClear!
	isInEntry = true
	currentEntry = nil
	true

export enterEntryAsync = (entry)->
	isInEntry = false
	App.idled = false
	currentEntry = entry
	[name, file] = entry
	if cppTestSet[entry]
		if App\runTest name
			return true
		else
			return false, "failed to run cpp test '#{name}'"
	sleep!
	try
		for path in *runningPaths
			Content\insertSearchPath 1, path
		result = require file
		result! if "function" == type result
	catch msg
		err = debug.traceback msg
		allClear!
		print err
		import "UI.Control.Basic.ScrollArea"
		import "UI.Control.Basic.AlignNode"
		import "UI.View.Shape.LineRect"
		width: viewWidth, height: viewHeight = View.size
		width, height = viewWidth - 20, viewHeight - 20
		fontSize = math.floor 20 * App.devicePixelRatio
		with AlignNode isRoot: true, inUI: false
			\addChild with root = AlignNode alignWidth: "w", alignHeight: "h"
				\addChild with scroll = ScrollArea {
						:width
						:height
						paddingX: 0
						paddingY: 50
						viewWidth: height
						viewHeight: height
					}
					\slot "AlignLayout", (w, h)->
						.position = Vec2 w / 2, h / 2
						w -= 20
						h -= 20
						.view.children.first.textWidth = w - fontSize
						\adjustSizeWithAlign "Auto", 10, Size w, h
					.view\addChild with label = Label "sarasa-mono-sc-regular", fontSize
						.alignment = "Left"
						.textWidth = width - fontSize
						.text = err
			\alignLayout!
		return err

enterDemoEntry = (entry)-> thread -> enterEntryAsync entry

reloadCurrentEntry = ->
	if currentEntry
		allClear!
		enterDemoEntry currentEntry

Director.clearColor = Color 0xff1a1a1a

waitForWebStart = true
thread ->
	sleep 2
	waitForWebStart = false

reloadDevEntry = ->
	waitForWebStart = true
	doClean!
	allClear!
	_G.require = oldRequire
	dora.require = oldRequire
	package.loaded["Dev.Entry"] = nil
	Director.systemScheduler\schedule ->
		Routine\clear!
		oldRequire "Dev.Entry"
		true

isOSSLicenseExist = Content\exist "LICENSES"
ossLicenses = nil
ossLicenseOpen = false

extraOperations = ->
	zh = useChinese and isChineseSupported
	if isOSSLicenseExist
		if Button zh and '开源协议' or 'OSS Licenses'
			unless ossLicenses
				ossLicenses = []
				licenseText = Content\load "LICENSES"
				if ossLicenseOpen := licenseText?
					licenseText = licenseText\gsub "\r\n", "\n"
					for license in GSplit licenseText, "\n--------\n", true
						if name, text := license\match "[%s\n]*([^\n]*)[\n]*(.*)"
							ossLicenses[] = [name, text]
			else
				ossLicenseOpen = true
		if ossLicenseOpen
			visualSize: {:width, :height}, :themeColor = App
			SetNextWindowPosCenter "Appearing", Vec2 0.5, 0.5
			SetNextWindowSize Vec2(math.min(width * 0.8, 750), height * 0.8), "Appearing"
			PushStyleVar "WindowPadding", Vec2(20, 10), -> ossLicenseOpen = Begin(
				zh and '开源协议' or 'OSS Licenses'
				ossLicenseOpen
				["NoSavedSettings",]
				-> for [firstLine, text] in *ossLicenses
					name, license = firstLine\match "(.+): (.+)"
					TextColored themeColor, name
					SameLine!
					TreeNode "#{license}####{name}", -> TextWrapped text
			)
	<- TreeNode zh and "开发操作" or "Development"
	OpenPopup "build" if Button zh and "脚本编译测试" or "Script Build Test"
	PushStyleVar "WindowPadding", Vec2(10, 10), -> BeginPopup "build", ->
		doCompile false if Selectable zh and "编译" or "Compile"
		Separator!
		doCompile true if Selectable zh and "压缩" or "Minify"
		Separator!
		doClean! if Selectable zh and "清理" or "Clean"
	if isInEntry
		if waitForWebStart
			BeginDisabled -> Button zh and "重载开发程序(Ctrl+Z)" or "Reload Dev Entry(Ctrl+Z)"
		elseif Button zh and "重载开发程序(Ctrl+Z)" or "Reload Dev Entry(Ctrl+Z)"
			reloadDevEntry!
	if changed, scaleContent := Checkbox string.format("%.1fx #{zh and '屏幕缩放' or 'Screen'}", screenScale), scaleContent
		View.scale = scaleContent and screenScale or 1

windowFlags =
	* "NoTitleBar"
	* "NoResize"
	* "NoMove"
	* "NoCollapse"
	* "NoSavedSettings"
	* "NoBringToFrontOnFocus"
initFooter = true
footerWindow = threadLoop ->
	zh = useChinese and isChineseSupported
	if HttpServer.wsConnectionCount > 0
		return
	App\shutdown! if Keyboard\isKeyDown "Escape"
	do
		ctrl = Keyboard\isKeyPressed "LCtrl"
		if ctrl and Keyboard\isKeyDown "Q"
			stop!
		if ctrl and Keyboard\isKeyDown "Z"
			reloadCurrentEntry!
		if ctrl and Keyboard\isKeyDown ","
			showStats = if showFooter then not showStats else true
			showFooter = true
			config.showFooter = showFooter and 1 or 0
			config.showStats = showStats and 1 or 0
		if ctrl and Keyboard\isKeyDown "."
			showConsole = if showFooter then not showConsole else true
			showFooter = true
			config.showFooter = showFooter and 1 or 0
			config.showConsole = showConsole and 1 or 0
		if ctrl and Keyboard\isKeyDown "/"
			showFooter = not showFooter
			config.showFooter = showFooter and 1 or 0
		left = ctrl and Keyboard\isKeyDown "Left"
		right = ctrl and Keyboard\isKeyDown "Right"
		currentIndex = nil
		for i, entry in ipairs allEntries
			if currentEntry == entry
				currentIndex = i
		if left
			allClear!
			currentIndex ??= #allEntries + 1
			enterDemoEntry if currentIndex > 1
				allEntries[currentIndex - 1]
			else
				allEntries[#allEntries]
		if right
			allClear!
			currentIndex ??= 0
			enterDemoEntry if currentIndex < #allEntries
				allEntries[currentIndex + 1]
			else
				allEntries[1]
	return unless showEntry

	:width, :height = App.visualSize
	SetNextWindowSize Vec2 170, 50
	SetNextWindowPos if width >= 600
		Vec2 width - 170, height - 50
	else
		Vec2 width, height
	PushStyleColor "WindowBg", Color(0x0), -> Begin "Show", windowFlags, ->
		if width >= 600
			Columns 2, false
			NextColumn!
			if changed, showFooter := Checkbox zh and "开发" or "Dev", showFooter
				config.showFooter = showFooter and 1 or 0

	if isInEntry and
		not waitForWebStart and
		Keyboard\isKeyPressed("LCtrl") and
		Keyboard\isKeyDown "Z"
		reloadDevEntry!
	if initFooter
		initFooter = false
	else
		return unless showFooter

	SetNextWindowSize Vec2 width, 50
	SetNextWindowPos Vec2 0, height - 50
	SetNextWindowBgAlpha 0.35
	PushStyleVar "WindowPadding", Vec2(10, 0), -> Begin "Footer", windowFlags, ->
		Dummy Vec2 width - 20, 0
		if changed, showStats := Checkbox zh and "状态" or "Stats", showStats
			config.showStats = showStats and 1 or 0
		SameLine!
		if changed, showConsole := Checkbox zh and "控制台" or "Log", showConsole
			config.showConsole = showConsole and 1 or 0
		unless isInEntry
			SameLine!
			if Button zh and "主页" or "Home", Vec2 70, 30
				allClear!
				isInEntry = true
				currentEntry = nil
			currentIndex = nil
			for i, entry in ipairs allEntries
				if currentEntry == entry
					currentIndex = i
			if currentIndex
				if currentIndex > 1
					SameLine!
					if Button zh and "前一个" or "Prev", Vec2 70, 30
						allClear!
						enterDemoEntry allEntries[currentIndex - 1]
				if currentIndex < #allEntries
					SameLine!
					if Button zh and "后一个" or "Next", Vec2 70, 30
						allClear!
						enterDemoEntry allEntries[currentIndex + 1]
			SameLine!
			if Button zh and "刷新" or "Reload", Vec2 70, 30
				reloadCurrentEntry!
		PushStyleVar "WindowPadding", Vec2(10, 10), ->
			if showStats
				SetNextWindowPos Vec2(10, 50), "FirstUseEver"
				showStats = ShowStats showStats, extraOperations
				config.showStats = showStats and 1 or 0
			if showConsole
				SetNextWindowPos Vec2(width - 425, height - 375), "FirstUseEver"
				showConsole = ShowConsole showConsole
				config.showConsole = showConsole and 1 or 0

const MaxWidth = 800

displayWindowFlags =
	* "NoDecoration"
	* "NoSavedSettings"
	* "NoFocusOnAppearing"
	* "NoNav"
	* "NoMove"
	* "NoScrollWithMouse"
	* "AlwaysAutoResize"
	* "NoBringToFrontOnFocus"

webStatus = nil
descColor = Color 0xffa1a1a1
gameOpen = false
exampleOpen = false
testOpen = false
filterText = nil
anyEntryMatched = false
match = (name)->
	res = not filterText or name\lower!\match filterText
	anyEntryMatched = true if res
	res

entryWindow = threadLoop ->
	if App.fpsLimited ~= (config.fpsLimited == 1)
		config.fpsLimited = App.fpsLimited and 1 or 0
	if App.targetFPS ~= config.targetFPS
		config.targetFPS = App.targetFPS
	if View.vsync ~= (config.vsync == 1)
		config.vsync = View.vsync and 1 or 0
	if Director.scheduler.fixedFPS ~= config.fixedFPS
		config.fixedFPS = Director.scheduler.fixedFPS
	return unless showEntry
	return unless isInEntry
	zh = useChinese and isChineseSupported
	if HttpServer.wsConnectionCount > 0
		:themeColor = App
		:width, :height = App.visualSize
		SetNextWindowBgAlpha 0.5
		SetNextWindowPos Vec2(width / 2, height / 2), "Always", Vec2 0.5, 0.5
		Begin "Web IDE Connected", displayWindowFlags, ->
			Separator!
			TextColored themeColor, "#{zh and '网页 IDE 已连接 ……' or 'Web IDE connected ...'}"
			slogon = zh and 'Dora 启动！' or 'Dora Start!'
			TextColored descColor, slogon
			Separator!
		return

	:themeColor = App
	width:fullWidth, :height = App.visualSize

	SetNextWindowBgAlpha 0.85
	SetNextWindowPos Vec2(5, height - 130), "Always", Vec2 0, 0
	PushStyleVar "WindowPadding", Vec2(10, 5), ->
		Begin "Web IDE", displayWindowFlags, ->
			Separator!
			TextColored themeColor, "#{zh and '网页' or 'Web'} IDE"
			url = webStatus?.url ?? zh and '不可用' or 'not available'
			TextColored descColor, url
			Separator!

	width = math.min MaxWidth, fullWidth
	paddingX = math.max 10, fullWidth / 2 - width / 2 - 10
	maxColumns = math.max math.floor(width / 200), 1
	SetNextWindowPos Vec2.zero
	SetNextWindowBgAlpha 0
	PushStyleVar "WindowPadding", Vec2(10, 0), ->
		Begin "Dora Dev", displayWindowFlags, ->
			Dummy Vec2 fullWidth - 20, 0
			TextColored themeColor, "DORA SSR #{zh and '开发' or 'DEV'}"
			SameLine!
			if fullWidth >= 320
				Dummy Vec2 fullWidth - 320, 0
				SameLine!
				SetNextItemWidth -50
				if InputText zh and '筛选' or 'Filter', filterBuf, ["AutoSelectAll",]
					config.filter = filterBuf\toString!
			Separator!
			Dummy Vec2 fullWidth - 20, 0

	anyEntryMatched = false
	SetNextWindowPos Vec2 0, 50
	SetNextWindowSize Vec2 fullWidth, height - 100
	PushStyleColor "WindowBg", Color(0x0), -> PushStyleVar "WindowPadding", Vec2(paddingX, 10), ->
		Begin "Content", windowFlags, ->
			filterText = filterBuf\toString!\match "[^%%%.%[]+"
			filterText = filterText\lower! if filterText
			if #gamesInDev > 0
				for game in *gamesInDev
					[gameName, _, examples, tests] = game
					showSep = false
					if match gameName
						Columns 1, false
						TextColored themeColor, zh and "项目：" or "Project:"
						SameLine!
						Text gameName
						Separator!
						PushID gameName, ->
							if Button zh and "开始运行" or "Game Start", Vec2 -1, 40
								enterDemoEntry game
						NextColumn!
						showSep = true
					if #examples > 0
						showExample = false
						for example in *examples
							if match example[1]
								showExample = true
								break
						if showExample
							Columns 1, false
							TextColored themeColor, zh and "示例：" or "Example:"
							SameLine!
							Text gameName
							Columns maxColumns, false
							for example in *examples
								continue unless match example[1]
								PushID "#{gameName} #{example[1]} example", ->
									if Button example[1], Vec2 -1, 40
										enterDemoEntry example
									NextColumn!
								showSep = true
					if #tests > 0
						showTest = false
						for test in *tests
							if match test[1]
								showTest = true
								break
						if showTest
							Columns 1, false
							TextColored themeColor, zh and "测试：" or "Test:"
							SameLine!
							Text gameName
							Columns maxColumns, false
							for test in *tests
								continue unless match test[1]
								PushID "#{gameName} #{test[1]} test", ->
									if Button test[1], Vec2 -1, 40
										enterDemoEntry test
									NextColumn!
								showSep = true
					if showSep
						Columns 1, false
						Separator!
			if #games > 0 or #doraExamples > 0 or #doraTests > 0
				showGame = false
				for [name,] in *games
					showGame = true if match name
				showExample = false
				for [name,] in *doraExamples
					showExample = true if match name
				showTest = false
				for [name,] in *doraTests
					showTest = true if match name
				for [name,] in *cppTests
					showTest = true if match name
				goto endEntry unless showGame or showExample or showTest
				Columns 1, false
				TextColored themeColor, "Dora SSR:"
				SameLine!
				Text zh and "开发示例" or "Development Showcase"
				Separator!
				if #games > 0 and showGame
					opened = if filterText? then showGame else false
					SetNextItemOpen gameOpen
					TreeNode zh and "游戏演示" or "Game Demo", ->
						Columns maxColumns, false
						for game in *games
							continue unless match game[1]
							if Button game[1], Vec2 -1, 40
								enterDemoEntry game
							NextColumn!
						Columns 1, false
						opened = true
					gameOpen = opened
				if #doraExamples > 0 and showExample
					opened = if filterText? then showExample else false
					SetNextItemOpen exampleOpen
					TreeNode zh and "引擎示例" or "Engine Example", ->
						Columns maxColumns, false
						for example in *doraExamples
							continue unless match example[1]
							if Button example[1], Vec2 -1, 40
								enterDemoEntry example
							NextColumn!
						Columns 1, false
						opened = true
					exampleOpen = opened
				if (#doraTests > 0 or #cppTests > 0) and showTest
					opened = if filterText? then showTest else false
					SetNextItemOpen testOpen
					TreeNode zh and "引擎测试" or "Engine Test", ->
						Columns maxColumns, false
						for test in *doraTests
							continue unless match test[1]
							if Button test[1], Vec2 -1, 40
								enterDemoEntry test
							NextColumn!
						for test in *cppTests
							continue unless match test[1]
							if Button test[1], Vec2 -1, 40
								enterDemoEntry test
							NextColumn!
						opened = true
					testOpen = opened
			::endEntry::
			unless anyEntryMatched
				SetNextWindowBgAlpha 0
				SetNextWindowPos Vec2(fullWidth / 2, height / 2), "Always", Vec2 0.5, 0.5
				Begin "Entries Not Found", displayWindowFlags, ->
					Separator!
					TextColored themeColor, zh and "多萝西：" or "Dora:"
					TextColored descColor, zh and '别担心，改变一些咒语，我们会找到新的冒险～' or 'Don\'t worry, more magic words and we\'ll find a new adventure!'
					Separator!
			Columns 1, false
			Dummy Vec2 100, 40

webStatus = require "WebServer"

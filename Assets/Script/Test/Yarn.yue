-- @preview-file on
_ENV = Dora Dora.ImGui
import "YarnRunner"
import "UI.View.Shape.LineRect"
import "UI.Control.Basic.CircleButton"
import "UI.Control.Basic.ScrollArea"

path = Path\getScriptPath ...
Content\insertSearchPath 1, path

fontSize = math.floor 20 * App.devicePixelRatio

texts = []

local root, label, scroll, control, menu

with root = AlignNode!
	const {width: viewWidth, height: viewHeight} = View.size
	\css "width: #{viewWidth}; height: #{viewHeight}; flex-direction: column-reverse"
	\gslot "AppChange", (settingName) -> if settingName == "Size"
		:width, :height = View.size
		\css "width: #{width}; height: #{height}; flex-direction: column-reverse"
	const width, height = viewWidth - 200, viewHeight - 20
	\addChild with scroll = ScrollArea {
			:width
			:height
			paddingX: 0
			paddingY: 50
			viewWidth: height
			viewHeight: height
		}
		.border = LineRect x: 1, y: 1, width: width - 2, height: height - 2, color: 0xffffffff
		.area\addChild .border
		root\onAlignLayout (w, h) ->
			.position = Vec2 w / 2, h / 2
			w -= 200
			h -= 20
			.view.children.first.textWidth = w - fontSize
			\adjustSizeWithAlign "Auto", 10, Size w, h
			.area\removeChild .border
			.border = LineRect x: 1, y: 1, width: w - 2, height: h - 2, color: 0xffffffff
			.area\addChild .border
		.view\addChild with label = Label "sarasa-mono-sc-regular", fontSize
			.alignment = "Left"
			.textWidth = width - fontSize
			.text = ""
	\addChild with control = AlignNode!
		\css "height: 140; margin-bottom: 40"
		menu = Menu!
		\addChild menu
		\onAlignLayout (w, h) ->
			menu.position = Vec2 w / 2, h / 2

commands = <index>: (_self, name) -> (...) ->
	msg = "[command]: " .. name .. " " .. table.concat [tostring select i, ... for i = 1, select '#', ...], ", "
	coroutine.yield "Command", msg

testFiles = [Path(Content.assetPath, "Script", "Test", "tutorial.yarn"),]
files = ["Test/tutorial.yarn",]

runner = YarnRunner testFiles[1], "Start", {}, commands, true

local advance

setButtons = (options) ->
	menu\removeAllChildren!
	buttons = options ?? 1
	with menu
		.size = Size 140 * buttons, 140
		for i = 1, buttons
			\addChild with CircleButton {
					text: options and "#{i}" or "Next"
					radius: 60
					fontSize: 40
				}
				\onTapped ->
					if options
						advance i
					else
						advance!
		\alignItems!

advance = (option) ->
	action, result = runner\advance option
	switch action when "Text"
		charName = ""
		if result.marks
			for mark in *result.marks
				switch mark when {name: attr, attrs: {:name}}
					charName = "#{name}: " if attr == "char"
		texts[] = charName .. result.text
		if result.optionsFollowed
			advance!
		else
			setButtons!
	when "Option"
		for i, op in ipairs result
			texts[] = "[#{i}]: #{op.text}"
		setButtons #result
	when "Command"
		texts[] = result
		setButtons!
	else
		menu\removeAllChildren!
		texts[] = result
	label.text = table.concat texts, "\n"
	scroll\adjustSizeWithAlign "Auto", 10
	thread -> scroll\scrollToPosY label.y - label.height / 2

advance!

for file in *Content\getAllFiles Content.writablePath
	continue if "yarn" ~= Path\getExt file
	testFiles[] = Path Content.writablePath, file
	files[] = Path\getFilename file

currentFile = 1
import "ImGuiEnum" as {:$WindowFlag}
windowFlags = $WindowFlag(
	NoDecoration
	NoSavedSettings
	NoFocusOnAppearing
	NoNav
	NoMove
)
threadLoop ->
	const :width = App.visualSize
	SetNextWindowPos Vec2(width - 10, 10), "Always", Vec2 1, 0
	SetNextWindowSize Vec2(200, 0), "Always"
	Begin "Yarn Test", windowFlags, ->
		Text "Yarn Tester (Yuescript)"
		Separator!
		changed, currentFile = Combo "File", currentFile, files
		if changed
			runner = YarnRunner testFiles[currentFile], "Start", {}, commands, true
			texts = []
			advance!
		Text "Variables"
		Separator!
		for k, v in pairs runner.state
			Text "#{k}: #{v}"

_ENV = Dorothy!

HttpServer.wwwPath = Path Content.writablePath, ".www"

HttpServer\post "/infer", (req)->
	switch req when {body: {:lang, :content}}
		switch lang when "tl"
			infered = teal.infer content
			if infered?
				return success: true, :infered
	success: false

HttpServer\post "/complete", (req)->
	switch req when {body: {:lang, :content}}
		switch lang when "tl"
			suggestions = teal.complete content
			if #suggestions > 0
				return success: true, :suggestions
	success: false

HttpServer\post "/check", (req)->
	switch req when {body: {:file, :content}}
		switch Path\getExt(file) when "tl"
			success, info = teal.check content, file
			return :success, :info
	success: true

HttpServer\upload(
	"/upload"
	(req, filename)->
		switch req when {params: {:path}}
			uploadPath = Path Content.writablePath, ".upload"
			if not Content\exist uploadPath
				Content\mkdir uploadPath
			return Path uploadPath, filename
		nil
	(req, file)->
		switch req when {params: {:path}}
			target = Path path, Path\getFilename file
			if Content\move file, target
				return true
		false
)

HttpServer\post "/list", (req)->
	switch req when {body: {:path}}
		if Content\exist path
			files = {}
			visitAssets = (path, folder)->
				dirs = Content\getDirs path
				for dir in *dirs
					continue if dir\match "^%."
					current = if folder == ""
						dir
					else
						Path folder, dir
					files[] = current
					visitAssets Path(path, dir), current
				fs = Content\getFiles path
				for f in *fs
					continue if f\match "^%."
					files[] = if folder == ""
						f
					else
						Path folder, f
			visitAssets path, ""
			return success: true, :files
	success: false

HttpServer\post "/info", -> platform: App.platform

HttpServer\post "/new", (req)->
	switch req when {body: {:path}}
		if not Content\exist path
			if "" == Path\getExt path
				if Content\mkdir path
					return success: true
			else if Content\save path, ""
				return success: true
	success: false

HttpServer\post "/delete", (req)->
	switch req when {body: {:path}}
		if Content\exist path
			if Content\remove path
				return success: true
	success: false

HttpServer\post "/rename", (req)->
	switch req when {body: {:old, :new}}
		if Content\exist(old) and not Content\exist new
			if Content\move old, new
				return success: true
	success: false

HttpServer\post "/read", (req)->
	switch req when {body: {:path}}
		if Content\exist path
			if content = Content\load path
				return :content, success: true
	content: "", success: false

HttpServer\post "/write", (req)->
	switch req when {body: {:path, :content}}
		if Content\save path, content
			return success: true
	success: false

HttpServer\post "/assets", ->
	visitAssets = (path)->
		children = nil
		dirs = Content\getDirs path
		for dir in *dirs
			continue if dir\match "^%."
			children = {} unless children
			children[] = visitAssets Path path, dir
		files = Content\getFiles path
		for file in *files
			continue if file\match "^%."
			children = {} unless children
			children[] = {
				key: Path path, file
				dir: false
				title: file
			}
		title = Path\getFilename path
		if title == ""
			children
		else
			{
				key: path
				dir: true
				:title
				:children
			}
	{
		key: Content.writablePath,
		dir: true,
		title: "Assets",
		children: visitAssets Content.writablePath
	}

if HttpServer\start 8866
	print "server started at 8866!"
else
	print "port not available!"

Director.entry\addChild with Node!
	\slot "Cleanup", -> HttpServer\stop!

_ENV = Dorothy!

HttpServer\post "/new", (req)->
	switch req
		when {body: {:path}}
			if not Content\exist path
				if "" == Path\getExt path
					if Content\mkdir path
						return success: true
				else if Content\save path, ""
					return success: true
	success: false

HttpServer\post "/delete", (req)->
	switch req
		when {body: {:path}}
			if Content\exist path
				if Content\remove path
					return success: true
	success: false

HttpServer\post "/rename", (req)->
	switch req
		when {body: {:old, :new}}
			if Content\exist(old) and not Content\exist new
				if Content\move old, new
					return success: true
	success: false

HttpServer\post "/read", (req)->
	switch req
		when {body: {:path}}
			if Content\exist path
				if content = Content\load path
					return :content, success: true
	content: "", success: false

HttpServer\post "/write", (req)->
	switch req
		when {body: {:path, :content}}
			if Content\save path, content
				return success: true
	success: false 


HttpServer\post "/assets", ->
	visitAssets = (path)->
		children = nil
		dirs = Content\getDirs path
		for dir in *dirs
			continue if dir\match "^%."
			children = {} unless children
			children[] = visitAssets Path path, dir
		files = Content\getFiles path
		for file in *files
			continue if file\match "^%."
			children = {} unless children
			children[] = {
				key: Path path, file
				dir: false
				title: file
			}
		title = Path\getFilename path
		if title == ""
			children
		else
			{
				key: path
				dir: true
				:title
				:children
			}
	{
		key: Content.writablePath,
		dir: true,
		title: "Assets",
		children: visitAssets Content.writablePath
	}

if HttpServer\start 8866
	print "server started at 8866!"
else
	print "port not available!"

Director.entry\addChild with Node!
	\slot "Cleanup", -> HttpServer\stop!

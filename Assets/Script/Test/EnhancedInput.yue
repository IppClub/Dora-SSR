_ENV = Dora

import "Enum" as $
import "InputManager"
import Trigger from InputManager
import "ImGuiEnum" as :$SetCond, :$WindowFlag

macro QTE = $Enum(
	None
	Phase1
	Phase2
	Phase3
)

macro State = $Enum(
	Canceled
	Completed
	Ongoing
)

QTEContext = (contextName, keyName, buttonName, timeWindow) -> with Trigger do return
	name: contextName,
	actions:
		* name: "QTE",
			trigger: .Sequence [
				.Selector [
					.Selector [
						.KeyPressed keyName
						.Block Trigger.AnyKeyPressed!
					]
					.Selector [
						.ButtonPressed buttonName
						.Block Trigger.AnyButtonPressed!
					]
				]
				.Selector [
					.KeyTimed keyName, timeWindow
					.ButtonTimed buttonName, timeWindow
				]
			]

inputManager = InputManager.CreateManager
	* name: "Default"
		actions:
			* name: "Confirm"
				trigger: Trigger.Selector [
					Trigger.ButtonHold "y", 1
					Trigger.KeyHold "Return", 1
				]
			* name: "MoveDown"
				trigger: Trigger.Selector [
					Trigger.ButtonPressed "dpdown"
					Trigger.KeyPressed "S"
				]
	* name: "Test"
		actions:
			* name: "Confirm"
				trigger: Trigger.Selector [
					Trigger.ButtonHold "x", 0.3
					Trigger.KeyHold "LCtrl", 0.3
				]
	* QTEContext ($QTE Phase1), "J", "a", 3
	* QTEContext ($QTE Phase2), "K", "b", 2
	* QTEContext ($QTE Phase3), "L", "x", 1

inputManager\pushContext "Default"

InputManager.CreateGamePad :inputManager

phase = $QTE None
text = ""

holdTime = 0.0
node = Node!
node\gslot "Input.Confirm", (state, progress) ->
	switch state
		when "Completed"
			holdTime = 1
		when "Ongoing"
			holdTime = progress

node\gslot "Input.MoveDown", (state, progress, value) ->
	if state == "Completed"
		print state, progress, value

node\gslot "Input.QTE", (state, progress) -> switch phase
	when $QTE Phase1
		switch state
			when $State Canceled
				phase = $QTE None
				inputManager\popContext!
				text = "Failed!"
				holdTime = progress
			when $State Completed
				phase = $QTE Phase2
				inputManager\pushContext phase
				text = "Button B or Key K"
			when $State Ongoing
				holdTime = progress

	when $QTE Phase2
		switch state
			when $State Canceled
				phase = $QTE None
				inputManager\popContext 2
				text = "Failed!"
				holdTime = progress
			when $State Completed
				phase = $QTE Phase3
				inputManager\pushContext phase
				text = "Button X or Key L"
			when $State Ongoing
				holdTime = progress

	when $QTE Phase3
		switch state
			when ($State Canceled), $State Completed
				phase = $QTE None
				inputManager\popContext 3
				text = state == "Completed" and "Success!" or "Failed!"
				holdTime = progress
			when $State Ongoing
				holdTime = progress

QTEButton = ->
	if ImGui.Button "Start QTE"
		phase = $QTE Phase1
		text = "Button A or Key J"
		inputManager\pushContext phase

countDownFlags = $WindowFlag(
	NoResize
	NoSavedSettings
	NoTitleBar
	NoMove
	AlwaysAutoResize
)
node\schedule loop (): false ->
	:width, :height = App.visualSize
	ImGui.SetNextWindowPos Vec2 width / 2 - 160, height / 2 - 100
	ImGui.SetNextWindowSize Vec2(300, 100), $SetCond Always
	ImGui.Begin "CountDown", countDownFlags, ->
		if phase == $QTE None
			QTEButton!
		else
			ImGui.BeginDisabled QTEButton
		ImGui.SameLine!
		ImGui.Text text
		ImGui.ProgressBar holdTime, Vec2 -1, 30

checked = false

windowFlags = $WindowFlag(
	NoDecoration
	AlwaysAutoResize
	NoSavedSettings
	NoFocusOnAppearing
	NoNav
	NoMove
)
threadLoop (): false ->
	:width = App.visualSize
	ImGui.SetNextWindowBgAlpha 0.35
	ImGui.SetNextWindowPos Vec2(width - 10, 10), ($SetCond Always), Vec2 1, 0
	ImGui.SetNextWindowSize Vec2(240, 0), $SetCond FirstUseEver
	ImGui.Begin "EnhancedInput", windowFlags, ->
		ImGui.Text "Enhanced Input (YueScript)"
		ImGui.Separator!
		ImGui.TextWrapped "Change input context to alter input mapping"
		if phase == $QTE None
			if changed, result := ImGui.Checkbox "hold X to confirm (instead Y)", checked
				checked = result
				inputManager\popContext!
			else
				inputManager\pushContext "Test"

--[[ Copyright (c) 2016-2025 Li Jin <dragon-fly@qq.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ]]

_ENV = Dora(
	Dora.Platformer
	Dora.Platformer.Decision
)

store: Store = Data
{
	:MaxBunnies
} = Store

heroes = Group ["hero",]

gameEndWait = Seq [
	Con "game end", -> Store.winner?
	Sel [
		Seq [
			Con "need wait", => @onSurface and not @isDoing "wait"
			Act "cancel"
			Act "wait"
		]
		Accept!
	]
]

Store["PlayerControlAI"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	Seq [
		Con "pushing switch", => @isDoing "pushSwitch"
		Accept!
	]
	Seq [
		Seq [
			Con "move key down", =>
				not (@data.keyLeft and @data.keyRight) and
				(
					(@data.keyLeft and @faceRight) or
					(@data.keyRight and not @faceRight)
				)
			Act "turn"
		]
		Reject!
	]
	Seq [
		Con "attack key down", => Store.winner == nil and @data.keyF
		Sel [
			Seq [
				Con "at switch", =>
					theSwitch = @data.atSwitch
					theSwitch? and not theSwitch.data.pushed and
					((@x < theSwitch.x) == @faceRight)
				Act "pushSwitch"
			]
			Act "villyAttack"
			Act "meleeAttack"
			Act "rangeAttack"
		]
	]
	Sel [
		Seq [
			Con "is falling", => not @onSurface
			Act "fallOff"
		]
		Seq [
			Con "jump key down", => @data.keyUp
			Act "jump"
		]
	]
	Seq [
		Con "move key down", => @data.keyLeft or @data.keyRight
		Act "walk"
	]
	Act "idle"
]

Store["HeroAI"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	Seq [
		Con "is falling", => not @onSurface
		Act "fallOff"
	]
	gameEndWait
	Seq [
		Con "need attack", =>
			attackUnits = AI\getUnitsInAttackRange!
			for unit in *attackUnits
				if Data\isEnemy(@,unit) and
					(@x < unit.x) == @faceRight
					return true
			false
		Sel [
			Act "villyAttack"
			Act "rangeAttack"
			Act "meleeAttack"
		]
	]
	Seq [
		Con "not facing enemy", => heroes\each (hero) ->
			:unit = hero
			if Data\isEnemy unit,@
				if (@x > unit.x) == @faceRight
					return true
		Act "turn"
	]
	Seq [
		Con "need turn", =>
			(@x < 100 and not @faceRight) or (@x > 3990 and @faceRight)
		Act "turn"
	]
	Seq [
		Con "wanna jump", -> App.rand % 20 == 0
		Act "jump"
	]
	Seq [
		Con "is at enemy side", => heroes\each (hero) ->
			:unit = hero
			if Data\isEnemy unit,@
				if math.abs(@x - unit.x) < 50
					return true
		Act "idle"
	]
	Act "walk"
]

Store["BunnyForwardReturnAI"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	Seq [
		Con "is falling", => not @onSurface
		Act "fallOff"
	]
	gameEndWait
	Seq [
		Con "need attack", =>
			attackUnits = AI\getUnitsInAttackRange!
			for unit in *attackUnits
				if Data\isEnemy(@,unit) and
					(@x < unit.x) == @faceRight
					return App.rand % 5 ~= 0
			false
		Act "meleeAttack"
	]
	Seq [
		Con "need turn", =>
			(@x < 100 and not @faceRight) or (@x > 3990 and @faceRight)
		Act "turn"
	]
	Act "walk"
]

Store["SwitchAI"] = Sel [
	Seq [
		Con "is pushed", => @data.pushed
		Act "pushed"
	]
	Act "waitUser"
]

switches = Group ["switch",]
turnToSwitch = Seq [
	Con "go to switch", => switches\each (item) ->
		if item.group == @group and @entity and @entity.targetSwitch == item.switch
			return (@x > item.unit.x) == @faceRight
	Act "turn"
	Reject!
]
Store["BunnySwitcherAI"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	Seq [
		Con "is falling", => not @onSurface
		Act "fallOff"
	]
	gameEndWait
	Seq [
		Con "need attack", =>
			attackUnits = AI\getUnitsInAttackRange!
			for unit in *attackUnits
				if Data\isEnemy(@, unit) and
					(@x < unit.x) == @faceRight
					return App.rand % 5 ~= 0
			false
		Act "meleeAttack"
	]
	Seq [
		Con "at switch", => with @data
			return .atSwitch? and .atSwitch.entity.switch == @entity.targetSwitch
		Sel [
			Seq [
				Con "switch available", => heroes\each (hero) ->
					return false if @group ~= hero.group
					needEP,available = switch @entity.targetSwitch
						when "Switch"
							bunnyCount = 0
							Group(["bunny",])\each (bunny) ->
								bunnyCount += 1 if bunny.group == @group
							1,bunnyCount < MaxBunnies
						when "SwitchG"
							2,hero.defending
					if hero.ep >= needEP and available
						if not @data.atSwitch\isDoing "pushed"
							hero.defending = false if @entity.targetSwitch == "SwitchG"
							return true
					false
				Act "pushSwitch"
			]
			turnToSwitch
			Act "idle"
		]
	]
	Seq [
		Con "need turn", =>
			(@x < 100 and not @faceRight) or (@x > 3990 and @faceRight)
		Act "turn"
	]
	turnToSwitch
	Act "walk"
]

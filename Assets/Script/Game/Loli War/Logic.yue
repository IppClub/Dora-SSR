--[[ Copyright (c) 2016-2025 Li Jin <dragon-fly@qq.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ]]

_ENV = Dora Dora.Platformer

store: Store = Data
{
	:GroupPlayer
	:GroupEnemy
	:GroupDisplay
	:GroupPlayerBlock
	:GroupEnemyBlock
	:GroupPlayerPoke
	:GroupEnemyPoke
	:LayerBunny
	:LayerPlayerHero
	:LayerEnemyHero
	:LayerBlock
	:MaxEP
	:MaxHP
} = Store

heroes = Group ["hero",]
with Observer "Add", ["world",]
	\watch (_entity, world): false ->
		Store.world = with world
			with .camera
				.followRatio = Vec2 0.03, 0.03
				.boundary = Rect 0, -110, 4096, 1004
				.position = Vec2 1024, 274
			\setIterations 2, 3
			\gslot "BlockValue", (group, value) -> heroes\each (hero) ->
				hero.blocks = value if hero.group == group
			\gslot "BlockChange", (group, value) -> heroes\each (hero) ->
				if hero.group == group and hero.blocks
					hero.blocks = math.max hero.blocks + value, 0
					hero.defending = true if value < 0
			\gslot "EPChange", (group, value) -> heroes\each (hero) ->
				hero.ep += value if hero.group == group
			\gslot "PlayerSelect", (hero) -> thread ->
				sleep 1
				\clearScene!
				for ep in *[6, 1, 1]
					emit "EPChange", GroupPlayer, ep
					emit "EPChange", GroupEnemy, ep
				Store.winner = nil
				.playing = true
				Audio\playStream "Audio/LOOP14.ogg", true
				names = [n for n in *["Flandre", "Dorothy", "Villy"] when n ~= hero]
				enemyHero = names[(App.rand % 2) + 1]
				Entity
					hero: hero
					group: GroupPlayer
					faceRight: true
					AI: "PlayerControlAI"
					layer: LayerPlayerHero
					position: Vec2 512, 1004 - 712
					ep: MaxEP
				Entity
					hero: enemyHero
					group: GroupEnemy
					faceRight: false
					AI: "HeroAI"
					layer: LayerEnemyHero
					position: Vec2 3584, 1004 - 712
					ep: MaxEP
				world\buildCastles!
				world\addBunnySwither GroupPlayer
				world\addBunnySwither GroupEnemy

		world\buildBackground!
		world\buildSwitches!
		world\buildGameReadme!
		Audio\playStream "Audio/LOOP13.ogg", true

mutables =
	* "hp"
	* "moveSpeed"
	* "move"
	* "jump"
	* "targetAllow"
	* "attackBase"
	* "attackPower"
	* "attackSpeed"
	* "damageType"
	* "attackBonus"
	* "attackFactor"
	* "attackTarget"
	* "defenceType"

with Observer "Add", ["hero", "group", "layer", "position", "faceRight", "AI"]
	\watch (hero, group, layer, position, faceRight, AI): false =>
		:world = Store
		def = Store[hero]
		for var in *mutables
			@[var] = def[var]
		unit = with Unit def, world, @, position
			.group = group
			.faceRight = faceRight
			.order = layer
			.decisionTree = AI
			@attackSpeed = switch hero
				when "Dorothy" then 1.2
				when "Villy" then 1.3
				when "Flandre" then 1.8
			@moveSpeed = 1.5
			\eachAction => @recovery = 0.05
			\addTo world
			\addChild with Visual "Particle/select.par"
				\autoRemove!
				\start!
		if group == GroupPlayer
			world.camera.followTarget = unit
		emit "HPChange", @group, @hp

with Observer "Add", ["bunny", "group", "layer", "position", "faceRight", "AI"]
	\watch (bunny, group, layer, position, faceRight, AI): false =>
		:world = Store
		def = Store[bunny]
		for var in *mutables
			if var == "hp" and @[var] ~= nil
				continue
			@[var] = def[var]
		with Unit def, world, @, position
			.group = group
			.faceRight = faceRight
			.order = layer
			.decisionTree = AI
			\eachAction => @recovery = 0.1
			\addTo world
			@hp -= 1.0 if @hp == 0.0

with Observer "Add", ["switch", "group", "layer", "look", "position"]
	\watch (switchType, group, layer, look, position): false =>
		:world = Store
		unit = with Unit Store[switchType], world, @, position
			.group = group
			.order = layer
			with .playable
				.look = look
				.scaleX = 2
				.scaleY = 2
			\addTo world
			.emittingEvent = true
			\slot "BodyEnter", (sensorTag) =>
				if .attackSensor.tag == sensorTag and @entity and Data\isFriend @, unit
					if @group == GroupPlayer and @entity.hero and not @data.tip
						floating = Action Sequence(
							Y 0.5, 140, 150, Ease.OutQuad
							Y 0.3, 150, 140, Ease.InQuad
						)
						@data.tip = with Sprite "Model/items.clip|keyf_down"
							.y = 140
							scaleOut = Action Spawn(
								Opacity 0.3, 0, 1
								Scale 0.3, 0, 1, Ease.OutQuad
							)
							\runAction scaleOut
							\slot "ActionEnd", -> \runAction floating
							\addTo @
					@data.atSwitch = unit
			\slot "BodyLeave", (sensorTag) =>
				if .attackSensor.tag == sensorTag and Data\isFriend @, unit
					@data.atSwitch = nil
					if @data.tip
						with @data.tip
							\perform Spawn(
								Scale 0.3, .scaleX, 0
								Opacity 0.3, 1, 0
							)
							\slot("ActionEnd")\set -> \removeFromParent!
						@data.tip = nil

with Observer "Add", ["block", "group", "layer", "look", "position"]
	\watch (block, group, layer, look, position): false =>
		:world = Store
		def = Store[block]
		@hp = def.hp
		@defenceType = 0
		with Unit def, world, @, position
			.group = group
			.order = layer
			.playable.look = look
			\addTo world

with Observer "Add", ["poke", "group", "layer", "position"]
	\watch (_entity, poke, group, layer, position): false ->
		:world = Store
		pokeDef = with BodyDef!
			.linearAcceleration = Vec2 0, -10
			.type = "Dynamic"
			\attachDisk 192, 10.0, 0.1, 0.4
			\attachDiskSensor 0, 194
		with Body pokeDef, world, position
			.group = group
			.velocityX = switch group
				when GroupPlayerPoke then 400
				when GroupEnemyPoke then -400
			normal = with Sprite "Model/poke.clip|#{poke}"
				.scaleX = 4
				.scaleY = 4
				.filter = "Point"
			\addChild normal
			glow = with Sprite "Model/poke.clip|#{poke}l"
				.scaleX = 4
				.scaleY = 4
				.filter = "Point"
				.visible = false
			\addChild glow
			\slot "BodyEnter", (sensorTag) =>
				if sensorTag == 0 and switch @group
					when GroupPlayer, GroupEnemy then Data\isEnemy @group, .group
					else false then
					if (.x < @x) == (.velocityX > 0)
						@velocity = Vec2 .velocityX > 0 and 500 or -500, 400
						@start "strike"
			\schedule once ->
				while 50 < math.abs .velocityX
					sleep 0.1
				for _ = 1, 6
					Audio\play "Audio/di.wav"
					normal.visible = not normal.visible
					glow.visible = not glow.visible
					sleep 0.5
				sensor = \attachSensor 1,
					BodyDef\disk 500
				sleep!
				for body in *sensor.sensedBodies
					if Data\isEnemy body.group, .group
						:entity = body
						if entity and entity.hp > 0
							x = .x
							with body.data
								.hitPoint = body\convertToWorldSpace Vec2.zero
								.hitPower = Vec2 2000, 2400
								.hitFromRight = body.x < x
							entity.hp -= 1
				pos = \convertToWorldSpace Vec2.zero
				with Visual "Particle/boom.par"
					.position = pos
					.scaleX = 4
					.scaleY = 4
					\addTo world, LayerBlock
					\autoRemove!
					\start!
				\removeFromParent!
				Audio\play "Audio/explosion.wav"
			\addTo world, layer
		Audio\play "Audio/quake.wav"

with Observer "Change", ["hp", "unit", "block"]
	\watch (hp, unit): false =>
		hp: lastHp = @oldValues
		if hp < lastHp
			unit\start "cancel" if unit\isDoing "hit"
			if hp > 0
				unit\start "hit"
				unit.faceRight = true
				with unit.playable
					.recovery = 0.5
					\play "hp#{math.floor hp}"
			else
				unit\start "hit"
				unit.faceRight = true
				unit.group = Data.groupHide
				unit.playable\perform Scale 0.3, 1, 0, Ease.OutQuad
				unit\schedule once ->
					sleep 5
					unit\removeFromParent!
				group = switch @group
					when GroupPlayerBlock then GroupEnemy
					when GroupEnemyBlock then GroupPlayer
				emit "EPChange", group, 1
			group = switch @group
				when GroupPlayerBlock then GroupPlayer
				when GroupEnemyBlock then GroupEnemy
			emit "BlockChange", group, math.max(hp, 0) - lastHp

with Observer "Change", ["hp", "bunny"]
	\watch (hp): false =>
		:unit = @
		hp: lastHp = @oldValues
		if hp < lastHp
			unit\start "cancel" if unit\isDoing "hit"
			if hp > 0
				unit\start "hit"
			else
				unit\start "hit"
				unit\start "fall"
				unit.group = Data.groupHide
				group = switch @group
					when GroupPlayer then GroupEnemy
					when GroupEnemy then GroupPlayer
				emit "EPChange", group, 1
				unit\schedule once ->
					sleep 5
					unit\removeFromParent!

with Observer "Change", ["hp", "hero"]
	\watch (hp): false =>
		:unit = @
		hp: lastHp = @oldValues
		:world = Store
		if hp < lastHp
			unit\start "cancel" if unit\isDoing "hit"
			if hp > 0
				unit\start "hit"
			else
				unit\start "hit"
				unit\start "fall"
				lastGroup = unit.group
				unit.group = Data.groupHide
				if unit.data.tip
					unit.data.tip\removeFromParent!
					unit.data.tip = nil
				emit "EPChange", lastGroup, 6
				switch lastGroup
					when GroupPlayer
						Audio\play "Audio/hero_fall.wav"
					when GroupEnemy
						Audio\play "Audio/hero_kill.wav"
				if lastGroup == GroupPlayer
					world\addChild with Node!
						\schedule once ->
							View.postEffect = with SpriteEffect "builtin:vs_sprite", "builtin:fs_spritesaturation"
								\get(1)\set "u_adjustment", 0
							sleep 3
							cycle 5, (dt) -> View.postEffect\get(1)\set "u_adjustment", dt
							View.postEffect = nil
						\slot "Cleanup", ->
							View.postEffect = nil
							Director.scheduler.timeScale = 1
				unit\schedule once ->
					Director.scheduler.timeScale = 0.25
					sleep 3
					Director.scheduler.timeScale = 1
					sleep 2
					world\addBunnySwither lastGroup
					unit.visible = false
					start = unit.position
					stop = switch lastGroup
						when GroupPlayer then Vec2 512, 1004 - 512
						when GroupEnemy then Vec2 3584, 1004 - 512
					cycle 5, (dt) -> unit.position = start + (stop - start) * Ease\func Ease.OutQuad, dt
					unit.playable.look = "happy"
					unit.visible = true
					unit.velocityY = 1
					unit.group = lastGroup
					@hp = MaxHP
					emit "HPChange", lastGroup, MaxHP
					with Visual "Particle/select.par"
						\addTo unit
						\start!
						\autoRemove!
				group = switch @group
					when GroupPlayer then GroupEnemy
					when GroupEnemy then GroupPlayer
				emit "EPChange", group, 1
		emit "HPChange", @group, math.max(hp, 0) - lastHp

with Observer "Change", ["blocks", "group"]
	\watch (_entity, blocks, group): false ->
		:world = Store
		return false unless world.playing
		if blocks == 0
			world.playing = false
			Audio\playStream "Audio/LOOP11.ogg", true
			Store.winner, clip, sound = switch group
				when GroupPlayer then GroupEnemy, "lose", "hero_lose"
				when GroupEnemy then GroupPlayer, "win", "hero_win"
			Audio\play "Audio/#{sound}.wav"
			sp = with Sprite "Model/misc.clip|#{clip}"
				.scaleX = 2
				.scaleY = 2
				.filter = "Point"
			rectDef = with BodyDef!
				.linearAcceleration = Vec2 0, -10
				.type = "Dynamic"
				\attachPolygon sp.width * 2, sp.height * 2, 1, 0, 1
			heroes\each (hero) ->
				if hero.group == GroupPlayer
					with Body rectDef, world, Vec2(hero.unit.x, 512)
						.order = LayerBunny
						.group = GroupDisplay
						\addChild sp
						\addTo world

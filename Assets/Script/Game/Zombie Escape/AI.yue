--[[ Copyright (c) 2025 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ]]

_ENV = Dora(
	Dora.Platformer
	Dora.Platformer.Decision
)
import "Platformer" as Behavior:BT

store: Store = Data

rangeAttack = Sel [
	Seq [
		Con "attack path blocked", =>
			sensor = @getSensorByTag Unit.AttackSensorTag
			if sensor.sensedBodies\each (body) ->
					body.group == Data.groupTerrain and
					(@x > body.x) ~= @faceRight and
					body.tag == "Obstacle"
				faceObstacle = true
				start = @position
				stop = Vec2 start.x + (@faceRight and 1 or -1) * @unitDef.attackRange.width, start.y
				Store.world\raycast start, stop, true, (b) ->
					return false if b.group == Data.groupDetection
					faceObstacle = false if Data\isEnemy @, b
					true
				faceObstacle
			else false
		Act "jump"
		Reject!
	]
	Act "rangeAttack"
]

walk = Sel [
	Seq [
		Con "obstacles ahead", =>
			start = @position
			stop = Vec2 start.x + (@faceRight and 140 or -140), start.y
			Store.world\raycast start, stop, false, (b, p) ->
				if b.group == Data.groupTerrain and b.tag == "Obstacle"
					@data.obstacleDistance = math.abs p.x - start.x
					true
				else false
		Sel [
			Seq [
				Con "obstacle distance <= 80", => @data.obstacleDistance <= 80
				Behave "backJump", BT.Seq [
					BT.Act "turn"
					BT.Countdown 0.3, BT.Act "walk"
					BT.Act "turn"
					BT.Countdown 0.1, BT.Act "walk"
					BT.Act "jump"
				]
			]
			Seq [
				Con "has forward speed", => math.abs(@velocityX) > 10
				Act "jump"
			]
		]
	]
	Act "walk"
]

fightDecision = Seq [
	Con "see enemy", -> AI\getNearestUnit("Enemy")?
	Sel [
		Seq [
			Con "need evade", =>
				return false if not @getAction "rangeAttack" or not @onSurface
				evadeLeftEnemy = false
				evadeRightEnemy = false
				sensor = @getSensorByTag Unit.AttackSensorTag
				sensor.sensedBodies\each (body) ->
					if Data\isEnemy @, body
						distance = math.abs @x - body.x
						if distance < 80
							evadeRightEnemy = false
							evadeLeftEnemy = false
							return true
						elseif distance < 200
							evadeRightEnemy = true if body.x > @x
							evadeLeftEnemy = true if body.x <= @x
				needEvade = not (evadeLeftEnemy == evadeRightEnemy) and math.abs(@x) < 1000
				@data.evadeRight = evadeRightEnemy if needEvade
				needEvade
			Sel [
				Seq [
					Con "face enemy", => @data.evadeRight == @faceRight
					Act "turn"
					walk
				]
				walk
			]
		]
		Seq [
			Con "not facing nearest enemy", =>
				enemy = AI\getNearestUnit "Enemy"
				(@x > enemy.x) == @faceRight
			Act "turn"
		]
		Seq [
			Con "enemy in attack range", ->
				enemy = AI\getNearestUnit "Enemy"
				attackUnits = AI\getUnitsInAttackRange!
				attackUnits and attackUnits\contains(enemy) or false
			Sel [
				rangeAttack
				Act "meleeAttack"
			]
		]
		Seq [
			Con "wanna jump", -> App.rand % 5 == 0
			Act "jump"
		]
		walk
	]
]

Store["AI_Zombie"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	Seq [
		Con "not entered", => not @data.entered
		Act "groundEntrance"
	]
	fightDecision
	Seq [
		Con "need stop", => not @isDoing "idle"
		Act "cancel"
		Act "idle"
	]
]

playerGroup = Group ["player",]

Store["AI_KidFollow"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	fightDecision
	Seq [
		Con "is falling", => not @onSurface
		Act "fallOff"
	]
	Seq [
		Con "follow target is away", =>
			if target := playerGroup\find (e) -> e.unit ~= @
				@data.followTarget = target.unit
				math.abs(@x - target.unit.x) > 50
			else false
		Sel [
			Seq [
				Con "not facing target", => (@x > @data.followTarget.x) == @faceRight
				Act "turn"
			]
			Accept!
		]
		walk
	]
	Seq [
		Con "need stop", => not @isDoing "idle"
		Act "cancel"
		Act "idle"
	]
]

Store["AI_KidSearch"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	fightDecision
	Seq [
		Con "is falling", => not @onSurface
		Act "fallOff"
	]
	Seq [
		Con "reach search limit", => math.abs(@x) > 1150 and ((@x > 0) == @faceRight)
		Act "turn"
	]
	Seq [
		Con "continue search", -> true
		walk
	]
]

Store["AI_PlayerControl"] = Sel [
	Seq [
		Con "is dead", => @entity.hp <= 0
		Accept!
	]
	Seq [
		Seq [
			Con "move key down", =>
				not (@data.keyLeft and @data.keyRight) and
				(
					(@data.keyLeft and @faceRight) or
					(@data.keyRight and not @faceRight)
				)
			Act "turn"
		]
		Reject!
	]
	Seq [
		Con "attack key down", => @data.keyShoot
		Sel [
			Act "meleeAttack"
			Act "rangeAttack"
		]
	]
	Sel [
		Seq [
			Con "is falling", => not @onSurface
			Act "fallOff"
		]
		Seq [
			Con "jump key down", => @data.keyUp
			Act "jump"
		]
	]
	Seq [
		Con "move key down", => @data.keyLeft or @data.keyRight
		Act "walk"
	]
	Seq [
		Con "need stop", => not @isDoing "idle"
		Act "cancel"
		Act "idle"
	]
]

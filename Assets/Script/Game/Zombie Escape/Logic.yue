_ENV = Dora dora.Platformer
import "UI.View.Shape.Rectangle"
import "UI.View.Shape.Circle"
import "UI.View.Shape.Star"

store:Store = Data

with Observer "Add", ["obstacleDef", "size", "position", "color"]
	\watch (obstacleDef, size, position, color) =>
		:world, :TerrainLayer = Store
		color = Color3 color
		with Body Store[obstacleDef], world, position
			.tag = "Obstacle"
			.order = TerrainLayer
			.group = Data.groupTerrain
			if "number" == type size
				\addChild Circle {
					radius: size
					fillColor: Color(color, 0x66)\toARGB!
					borderColor: Color(color, 0xff)\toARGB!
					fillOrder: 1
					lineOrder: 2
				}
				\addChild Star {
					size: 20
					borderColor: 0xffffffff
					fillColor: 0x66ffffff
					fillOrder: 1
					lineOrder: 2
				}
			else
				\addChild Rectangle {
					width: size.width
					height: size.height
					fillColor: Color(color, 0x66)\toARGB!
					borderColor: Color(color, 0xff)\toARGB!
					fillOrder: 1
					lineOrder: 2
				}
			\addTo world
		@destroy!
		false

mutables =
	* "hp"
	* "moveSpeed"
	* "move"
	* "jump"
	* "targetAllow"
	* "attackPower"
	* "attackSpeed"

with Observer "Add", ["unitDef", "position", "order", "group", "faceRight"]
	\watch (unitDef, position, order, group, faceRight) =>
		:world = Store
		def = Store[unitDef]
		for var in *mutables
			@[var] = def[var]
		unit = with Unit def, world, @, position
			.group = group
			.order = order
			.faceRight = faceRight
			\addTo world
			\eachAction => @recovery = 0
			with .playable
				\eachNode (sp)-> sp.filter = "Point"
				\play "groundEntrance" if @zombie
		world.camera.followTarget = unit if @player and unit.decisionTree == "AI_KidSearch"
		false

with Observer "Change", ["hp", "unit"]
	\watch (hp, unit) =>
		hp: lastHp = @oldValues
		if hp < lastHp
			if hp > 0
				unit\start "hit"
			else
				unit\start "hit"
				unit\start "fall"
				unit.group = Data.groupHide
				unit\schedule once ->
					sleep 5
					unit\runAction Opacity 0.5, 1, 0, Ease.OutQuad
					sleep 0.5
					if Store.world.camera.followTarget == unit
						if player := Group({"player", "unit"})\find => @player
							Store.world.camera.followTarget = player.unit
					unit\removeFromParent!
		false

Store.zombieKilled = 0
with Observer "Change", ["hp", "zombie"]
	\watch (hp) =>
		Store.zombieKilled += 1 if hp <= 0
		false

zombieGroup = Group ["zombie",]
threadLoop ->
	{
		:ZombieLayer,
		:ZombieGroup,
		:MaxZombies,
		:ZombieWaveDelay
		:world
	} = Store
	if zombieGroup.count < MaxZombies
		for i = zombieGroup.count + 1,MaxZombies
			available = false
			pos = Vec2.zero
			while not available
				pos = Vec2 App.rand % 2400 - 1200, -430
				available = not world\query Rect(pos, Size(5, 5)), => @group == Data.groupTerrain
			Entity
				unitDef: "Unit_Zombie#{math.floor App.rand % 2 + 1}"
				order: ZombieLayer
				position: pos
				group: ZombieGroup
				faceRight: App.rand % 2 == 0
				zombie: true
			sleep 0.1 * App.rand % 5
	sleep ZombieWaveDelay

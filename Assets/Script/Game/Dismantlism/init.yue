--[[ Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ]]

-- GGJ2022

_ENV = Dora

scriptPath = Path\getScriptPath ...
return unless scriptPath
Content\insertSearchPath 1, scriptPath

import "BodyEx"
import "UI.View.Shape.SolidRect"
import "Utils" as :Struct, :Set

root = with Node!
	\slot "Cleanup", -> Audio\stopStream 0.2
ui = with Node!
	.scaleX = .scaleY = 0.4
	\addChild Sprite "Model/duality.clip|stat"
score = 0
scoreTxt = with Label "sarasa-mono-sc-regular", 40
	.textAlign = "Center"
	.color3 = Color3 0x0
	.text = "0"
	\addTo ui

world = with PhysicsWorld!
	.y = 405
	\setShouldContact 0, 0, true
	\setShouldContact 0, 1, false
	\addTo root

isSpace = true
switchScene = nil

center = nil
spaceBack = nil
dailyBack = nil
Director.ui\addChild with AlignNode true
	\css "flex-direction: column"
	\slot "AlignLayout", (w, h) ->
		worldScale = w / 2970
		root.scaleX = worldScale
		root.scaleY = worldScale
		center.position = Vec2 w / 2, h / 2
		spaceBack\removeFromParent! if spaceBack
		spaceBack = with Node!
			.position = Vec2 w / 2, h / 2
			.visible = isSpace
			.order = -1
			\addChild with Grid "Model/duality.clip|space", 1, 1
				\moveUV 1, 1, Vec2 1, 1
				\moveUV 2, 1, Vec2 -1, 1
				\moveUV 1, 2, Vec2 1, -1
				\moveUV 2, 2, Vec2 -1, -1
				.scaleX = w / 8
				.scaleY = h / 1078
			\addChild with Node!
				.scaleX = worldScale
				.scaleY = worldScale
				for y = 1, 8 do for x = 1, 8
					\addChild with Sprite "Model/duality.clip|stary"
						.anchorX = 0
						.x = -3000 + (x - 1) * 1000
						.y = 3000 - (y - 1) * 1000
				\perform X 10, 0, -1000 * worldScale
				\slot "ActionEnd", -> \perform X 10, 0, -1000 * worldScale
		\addChild spaceBack
		dailyBack\removeFromParent! if dailyBack
		dailyBack = with Grid "Model/duality.clip|day", 1, 1
			.position = Vec2 w / 2, h / 2
			.visible = not isSpace
			.order = -1
			\moveUV 1, 1, Vec2 1, 1
			\moveUV 2, 1, Vec2 -1, 1
			\moveUV 1, 2, Vec2 1, -1
			\moveUV 2, 2, Vec2 -1, -1
			.scaleX = w / 8
			.scaleY = h / 1078
		\addChild dailyBack
	\addChild with AlignNode!
		.order = 1
		\css "height: 30%; flex-direction: row-reverse"
		\addChild with AlignNode!
			\css "height: 25; margin-right: 45"
			\addChild ui
	\addChild with center = AlignNode!
		.order = 2
		\css "height: 40%"
		\addChild with Node!
			.touchEnabled = true
			.swallowTouches = true
			\addChild with banner = Sprite "Model/duality.clip|dismantlism"
				center\slot "AlignLayout", (w, h) ->
					.position = Vec2 w / 2, h / 2
					.scaleX = .scaleY = 0.9 * math.min w / banner.width, h / banner.height
			\perform Sequence(
				Delay 1
				Spawn(
					Opacity 1, 1, 0, Ease.OutQuad
					Y 1, 0, 100, Ease.InQuad
				)
				Event "Start"
			)
			\slot "Start", ->
				isSpace = false
				switchScene!
				center\slot "AlignLayout", nil
				\removeFromParent!
	\addChild with AlignNode!
		\css "height: 30%"
		\addChild root
		\slot "AlignLayout", (w) -> root.x = w / 2

moveJoint = nil
movingBody = nil
with Node!
	.touchEnabled = true
	\slot "TapBegan", (touch) ->
		worldPos = \convertToWorldSpace touch.location
		pos = world\convertToNodeSpace worldPos
		world\query Rect(pos - Vec2(1, 1), Size 2, 2), (body) ->
			return false if body.tag ~= "" and body.tag ~= (isSpace and "space" or "daily")
			moveJoint\destroy! if moveJoint
			moveJoint = Joint\move true, body, pos, 400
			movingBody = body
			true
	\slot "TapMoved", (touch) ->
		if moveJoint
			worldPos = \convertToWorldSpace touch.location
			pos = world\convertToNodeSpace worldPos
			moveJoint.position = pos
	\slot "TapEnded", ->
		if moveJoint
			moveJoint\destroy!
			moveJoint = nil
			movingBody = nil

scene = require "scene"
Struct.Body "name", "file", "position", "angle"
Struct\load scene

spaceItems = Set
	* "rocket"
	* "satlite"
	* "spacestation"
	* "star1"
	* "star2"
	* "ufo"
	* "get"

dailyItems = Set
	* "baseball"
	* "burger"
	* "donut"
	* "fish"
	* "radio"
	* "tv"
	* "pizza"

spaceBodies = []
dailyBodies = []

switchScene = (init) ->
	if isSpace
		Audio\playStream "Audio/Dismantlism Space.ogg", true
		unless init
			dailyBack\perform Sequence(
				Show!
				Opacity 0.5, 1, 0
				Hide!
			)
			spaceBack\perform Sequence(
				Show!
				Opacity 0.5, 0, 1
			)
		for body in *dailyBodies
			with body.children[1]
				if .actionCount == 0
					\perform Sequence(
						Show!
						Scale 0.5, 1, 0, Ease.OutBack
						Hide!
					)
		for body in *spaceBodies
			with body.children[1]
				if .actionCount == 0
					\perform Sequence(
						Show!
						Scale 0.5, 0, 1, Ease.OutBack
					)
	else
		Audio\playStream "Audio/Dismantlism Daily.ogg", true
		unless init
			spaceBack\perform Sequence(
				Show!
				Opacity 0.5, 1, 0
				Hide!
			)
			dailyBack\perform Sequence(
				Show!
				Opacity 0.5, 0, 1
			)
		for body in *spaceBodies
			with body.children[1]
				if .actionCount == 0
					\perform Sequence(
						Show!
						Scale 0.5, 1, 0, Ease.OutBack
						Hide!
					)
		for body in *dailyBodies
			with body.children[1]
				if .actionCount == 0
					\perform Sequence(
						Show!
						Scale 0.5, 0, 1, Ease.OutBack
					)

restartScene = nil
gameEnded = false
buildScene = ->
	for i = 1, scene\count!
		{
			:name
			:file
			:position = Vec2.zero
			:angle = 0
		} = scene\get i
		node = BodyEx require(Path "Physics", file), world, position, angle
		world\addChild node
		if spaceItems[file]
			node.data\each =>
				@tag = "space"
				@children[1].tag = file
				spaceBodies[] = @
		elseif dailyItems[file]
			node.data\each =>
				@tag = "daily"
				@children[1].tag = file
				dailyBodies[] = @
		else
			node.data\each =>
				@children[1].tag = file if @children and #@children > 0
		switch file
			when "removearea"
				with node.data.rect
					\addChild SolidRect x: -200, y: -200, width: 400, height: 400, color: 0x66000000
					\addChild with Label "sarasa-mono-sc-regular", 80
						.textAlign = "Center"
						.color = Color 0x66ffffff
						.text = "Drag It\nHere"
					\slot "BodyEnter", (body) ->
						return if body.tag ~= "" and body.tag ~= (isSpace and "space" or "daily")
						return if body.group == 1
						body.group = 1
						with body.children[1]
							\perform Sequence Spawn(
								Opacity 0.5, 1, 0
								Scale 0.5, 1, 1.5, Ease.OutBack
							), Event "Destroy"
							\slot "Destroy", ->
								switch .tag
									when "star2", "pizza"
										score += 10
										isSpace = not isSpace
										switchScene!
									when "quit"
										-- App\shutdown!
									when "get", "fish"
										score += 100
									when "credit"
										score += 50
										world\addChild with Node!
											\addChild Sprite "Model/duality.clip|window"
											\addChild Sprite "Model/duality.clip|credits1"
											.position = body.position
											\perform Sequence(
												Spawn(
													Scale 0.5, 0, 1, Ease.OutBack
													Opacity 0.5, 0, 1
												)
												Delay 3
												Scale 0.5, 1, 0, Ease.InBack
												Event "End"
											)
											\slot "End", -> \removeFromParent!
									else
										score += 10
								scoreTxt.text = tostring score
								if score > 600
									gameEnded = true
									center\addChild with Node!
										\addChild Sprite "Model/duality.clip|window"
										\addChild Sprite "Model/duality.clip|win"
										\perform Sequence(
											Spawn(
												Scale 0.5, 0, 1, Ease.OutBack
												Opacity 0.5, 0, 1
											)
											Delay 3
											Scale 0.5, 1, 0, Ease.InBack
											Event "End"
										)
										\slot "End", ->
											\removeFromParent!
											restartScene!
								if movingBody == body and moveJoint
									moveJoint\destroy!
									moveJoint = nil
									movingBody = nil
								body\removeFromParent!
			when "safearea"
				with node.data.rect
					\slot "BodyEnter", (body) ->
						return if body == movingBody
						:tag = body.children[1]
						if (name == "safe1" and tag == "get") or
							(name == "safe2" and tag == "fish")
								if not gameEnded
									gameEnded = true
									world\addChild with Node!
										\addChild Sprite "Model/duality.clip|window"
										\addChild Sprite "Model/duality.clip|lose"
										.position = body.position
										\perform Sequence(
											Spawn(
												Scale 0.5, 0, 1, Ease.OutBack
												Opacity 0.5, 0, 1
											)
											Delay 2
											Scale 0.5, 1, 0, Ease.InBack
											Event "End"
										)
										\slot "End", -> restartScene!

buildScene!
switchScene true

restartScene = ->
	score = 0
	scoreTxt.text = "0"
	isSpace = false
	gameEnded = false
	if moveJoint
		moveJoint\destroy!
		moveJoint = nil
		movingBody = nil
	world\removeFromParent!
	world = with PhysicsWorld!
		.y = 405
		\setShouldContact 0, 0, true
		\setShouldContact 0, 1, false
		\addTo root
	buildScene!
	switchScene!

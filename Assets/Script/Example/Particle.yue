_ENV = Dora Dora.ImGui

blendFuncs = [
	"One"
	"Zero"
	"SrcAlpha"
	"DstAlpha"
	"InvSrcAlpha"
	"InvDstAlpha"
]
blendFuncDst = 1
blendFuncSrc = 3

emitterTypes = [
	"Gravity"
	"Radius"
]
emitterType = 1

Data =
	Angle: ["B","float",90]
	AngleVariance: ["C","float",360]
	BlendFuncDestination: ["D","BlendFunc",BlendFunc\get("One"),"One"]
	BlendFuncSource: ["E"," BlendFunc",BlendFunc\get("SrcAlpha"),"SrcAlpha"]
	Duration: ["F","floatN",-1]
	EmissionRate: ["G","float",350]
	FinishColor: ["H","Color",Color 0xff000000]
	FinishColorVariance: ["I","Color",Color 0x0]
	RotationStart: ["J","float",0]
	RotationStartVariance: ["K","float",0]
	RotationEnd: ["L","float",0]
	RotationEndVariance: ["M","float",0]
	FinishParticleSize: ["N","floatN",-1]
	FinishParticleSizeVariance: ["O","float",0]
	MaxParticles: ["P","Uint32",100]
	ParticleLifespan: ["Q","float",1]
	ParticleLifespanVariance: ["R","float",0.5]
	StartPosition: ["S","Vec2",Vec2 0,0]
	StartPositionVariance: ["T","Vec2",Vec2 0,0]
	StartColor: ["U","Color",Color 194,64,31,255]
	StartColorVariance: ["V","Color",Color 0x0]
	StartParticleSize: ["W","float",30]
	StartParticleSizeVariance: ["X","float",10]
	TextureName: ["Y","string","",Buffer 256]
	TextureRect: ["Z","Rect",Rect 0,0,0,0]
	EmitterType: ["a","EmitterType",0]
Gravity =
	RotationIsDir: ["b","bool",false]
	Gravity: ["c","Vec2",Vec2 0,100]
	Speed: ["d","float",20]
	SpeedVariance: ["e","float",5]
	RadialAcceleration: ["f","float",0]
	RadialAccelVariance: ["g","float",0]
	TangentialAcceleration: ["h","float",0]
	TangentialAccelVariance: ["i","float",0]
Radius =
	StartRadius: ["j","float",0]
	StartRadiusVariance: ["k","float",0]
	FinishRadius: ["l","floatN",-1]
	FinishRadiusVariance: ["m","float",0]
	RotatePerSecond: ["n","float",0]
	RotatePerSecondVariance: ["o","float",0]

toString = (value) ->
	switch tolua.type value
		when "number"
			"#{value}"
		when "string"
			value
		when "Rect"
			"#{value.x},#{value.y},#{value.width},#{value.height}"
		when "boolean"
			value and "1" or "0"
		when "Vec2"
			"#{value.x},#{value.y}"
		when "Color"
			string.format "%.2f,%.2f,%.2f,%.2f",value.r/255,value.g/255,value.b/255,value.a/255

getParticle = ->
	"<A>" .. table.concat(["\n\t<#{v[1]} A=\"#{toString v[3]}\"/>" for k, v in pairs {...Data, ...(emitterType == 1 and Gravity or Radius)}]) .. "\n</A>"

Cache\update "__test__.par", getParticle!

particle = with Particle "__test__.par"
	\start!

root = with Node!
	.scaleX = 2
	.scaleY = 2
	\addChild particle
	\onTapMoved (touch) ->
		return unless touch.first
		particle.position += touch.delta/2

-- example codes ends here, some test ui below --

DataDirty = false

Item = (name, data) -> with data[name] do switch [2]
	when "float"
		if changed, [3] := DragFloat name, [3], 0.1, -1000, 1000, "%.1f"
			DataDirty = true
	when "floatN"
		if changed, [3] := DragFloat name, [3], 0.1, -1, 1000, "%.1f"
			DataDirty = true
	when "Uint32"
		if changed, [3] := DragInt name, math.floor([3]), 1, 0, 1000
			DataDirty = true
	when "EmitterType"
		if changed, emitterType := Combo "EmitterType", emitterType, emitterTypes
			[3] = emitterType == 1 and 0 or 1
		PushItemWidth -180, ->
			if emitterType == 1
				for k in pairs Gravity do Item k, Gravity
			else
				for k in pairs Radius do Item k, Radius
	when "BlendFunc"
		if name == "BlendFuncDestination"
			if changed, blendFuncDst := Combo "BlendFuncDestination", blendFuncDst, blendFuncs
				[3] = BlendFunc\get blendFuncs[blendFuncDst]
				[4] = blendFuncs[blendFuncDst]
		elseif name == "BlendFuncSource"
			if changed, blendFuncSrc := Combo "BlendFuncSource", blendFuncSrc, blendFuncs
				[3] = BlendFunc\get blendFuncs[blendFuncSrc]
				[4] = blendFuncs[blendFuncSrc]
	when "Vec2"
		:x,:y = [3]
		if changed, x, y := DragInt2 name, math.floor(x), math.floor(y), 1, -1000, 1000
			DataDirty, [3] = true, Vec2 x, y
	when "Color"
		PushItemWidth -150, ->
			SetColorEditOptions ["DisplayRGB",]
			if changed := ColorEdit4 name, [3]
				DataDirty = true
	when "bool"
		if changed, [3] := Checkbox name, [3]
			DataDirty = true
	when "string"
		buffer = [4]
		if changed := InputText name, buffer
			DataDirty = true
			[3] = buffer.text

refresh = coroutine.wrap -> while true
	sleep 1
	if DataDirty
		DataDirty = false
		Cache\update "__test__.par", getParticle!
		particle\removeFromParent!
		particle = with Particle "__test__.par"
			\start!
			\addTo particle

import "ImGuiEnum" as :$WindowFlag
buffer = Buffer 5000
windowFlags = $WindowFlag NoResize, NoSavedSettings
threadLoop ->
	const :width, :height = App.visualSize
	SetNextWindowPos Vec2(width - 400, 10), "FirstUseEver"
	SetNextWindowSize Vec2(390, height - 80), "FirstUseEver"
	Begin "Particle", windowFlags, ->
		PushItemWidth -180, ->
			for k in pairs Data
				Item k, Data
		if Button "Export"
			buffer.text = getParticle!
		SameLine!
		PushItemWidth -1, ->
			InputTextMultiline "###Edited", buffer
	refresh!

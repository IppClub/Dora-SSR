// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROFILER_EFFEKSEER_DATA_H_
#define FLATBUFFERS_GENERATED_PROFILER_EFFEKSEER_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace Effekseer {
namespace Data {

struct NetworkManagerProfile;
struct NetworkManagerProfileBuilder;

struct NetworkEffectProfile;
struct NetworkEffectProfileBuilder;

struct NetworkProfileSample;
struct NetworkProfileSampleBuilder;

struct NetworkManagerProfile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NetworkManagerProfileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLE_COUNT = 4,
    VT_CPU_TIME = 6,
    VT_GPU_TIME = 8
  };
  uint32_t handle_count() const {
    return GetField<uint32_t>(VT_HANDLE_COUNT, 0);
  }
  float cpu_time() const {
    return GetField<float>(VT_CPU_TIME, 0.0f);
  }
  float gpu_time() const {
    return GetField<float>(VT_GPU_TIME, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_HANDLE_COUNT) &&
           VerifyField<float>(verifier, VT_CPU_TIME) &&
           VerifyField<float>(verifier, VT_GPU_TIME) &&
           verifier.EndTable();
  }
};

struct NetworkManagerProfileBuilder {
  typedef NetworkManagerProfile Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_handle_count(uint32_t handle_count) {
    fbb_.AddElement<uint32_t>(NetworkManagerProfile::VT_HANDLE_COUNT, handle_count, 0);
  }
  void add_cpu_time(float cpu_time) {
    fbb_.AddElement<float>(NetworkManagerProfile::VT_CPU_TIME, cpu_time, 0.0f);
  }
  void add_gpu_time(float gpu_time) {
    fbb_.AddElement<float>(NetworkManagerProfile::VT_GPU_TIME, gpu_time, 0.0f);
  }
  explicit NetworkManagerProfileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NetworkManagerProfile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NetworkManagerProfile>(end);
    return o;
  }
};

inline flatbuffers::Offset<NetworkManagerProfile> CreateNetworkManagerProfile(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t handle_count = 0,
    float cpu_time = 0.0f,
    float gpu_time = 0.0f) {
  NetworkManagerProfileBuilder builder_(_fbb);
  builder_.add_gpu_time(gpu_time);
  builder_.add_cpu_time(cpu_time);
  builder_.add_handle_count(handle_count);
  return builder_.Finish();
}

struct NetworkEffectProfile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NetworkEffectProfileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_HANDLE_COUNT = 6,
    VT_GPU_TIME = 8
  };
  const flatbuffers::Vector<uint16_t> *key() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_KEY);
  }
  uint32_t handle_count() const {
    return GetField<uint32_t>(VT_HANDLE_COUNT, 0);
  }
  float gpu_time() const {
    return GetField<float>(VT_GPU_TIME, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyVector(key()) &&
           VerifyField<uint32_t>(verifier, VT_HANDLE_COUNT) &&
           VerifyField<float>(verifier, VT_GPU_TIME) &&
           verifier.EndTable();
  }
};

struct NetworkEffectProfileBuilder {
  typedef NetworkEffectProfile Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> key) {
    fbb_.AddOffset(NetworkEffectProfile::VT_KEY, key);
  }
  void add_handle_count(uint32_t handle_count) {
    fbb_.AddElement<uint32_t>(NetworkEffectProfile::VT_HANDLE_COUNT, handle_count, 0);
  }
  void add_gpu_time(float gpu_time) {
    fbb_.AddElement<float>(NetworkEffectProfile::VT_GPU_TIME, gpu_time, 0.0f);
  }
  explicit NetworkEffectProfileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NetworkEffectProfile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NetworkEffectProfile>(end);
    return o;
  }
};

inline flatbuffers::Offset<NetworkEffectProfile> CreateNetworkEffectProfile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> key = 0,
    uint32_t handle_count = 0,
    float gpu_time = 0.0f) {
  NetworkEffectProfileBuilder builder_(_fbb);
  builder_.add_gpu_time(gpu_time);
  builder_.add_handle_count(handle_count);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<NetworkEffectProfile> CreateNetworkEffectProfileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *key = nullptr,
    uint32_t handle_count = 0,
    float gpu_time = 0.0f) {
  auto key__ = key ? _fbb.CreateVector<uint16_t>(*key) : 0;
  return Effekseer::Data::CreateNetworkEffectProfile(
      _fbb,
      key__,
      handle_count,
      gpu_time);
}

struct NetworkProfileSample FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NetworkProfileSampleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MANAGERS = 4,
    VT_EFFECTS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkManagerProfile>> *managers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkManagerProfile>> *>(VT_MANAGERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkEffectProfile>> *effects() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkEffectProfile>> *>(VT_EFFECTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MANAGERS) &&
           verifier.VerifyVector(managers()) &&
           verifier.VerifyVectorOfTables(managers()) &&
           VerifyOffset(verifier, VT_EFFECTS) &&
           verifier.VerifyVector(effects()) &&
           verifier.VerifyVectorOfTables(effects()) &&
           verifier.EndTable();
  }
};

struct NetworkProfileSampleBuilder {
  typedef NetworkProfileSample Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_managers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkManagerProfile>>> managers) {
    fbb_.AddOffset(NetworkProfileSample::VT_MANAGERS, managers);
  }
  void add_effects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkEffectProfile>>> effects) {
    fbb_.AddOffset(NetworkProfileSample::VT_EFFECTS, effects);
  }
  explicit NetworkProfileSampleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NetworkProfileSample> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NetworkProfileSample>(end);
    return o;
  }
};

inline flatbuffers::Offset<NetworkProfileSample> CreateNetworkProfileSample(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkManagerProfile>>> managers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Effekseer::Data::NetworkEffectProfile>>> effects = 0) {
  NetworkProfileSampleBuilder builder_(_fbb);
  builder_.add_effects(effects);
  builder_.add_managers(managers);
  return builder_.Finish();
}

inline flatbuffers::Offset<NetworkProfileSample> CreateNetworkProfileSampleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Effekseer::Data::NetworkManagerProfile>> *managers = nullptr,
    const std::vector<flatbuffers::Offset<Effekseer::Data::NetworkEffectProfile>> *effects = nullptr) {
  auto managers__ = managers ? _fbb.CreateVector<flatbuffers::Offset<Effekseer::Data::NetworkManagerProfile>>(*managers) : 0;
  auto effects__ = effects ? _fbb.CreateVector<flatbuffers::Offset<Effekseer::Data::NetworkEffectProfile>>(*effects) : 0;
  return Effekseer::Data::CreateNetworkProfileSample(
      _fbb,
      managers__,
      effects__);
}

inline const Effekseer::Data::NetworkProfileSample *GetNetworkProfileSample(const void *buf) {
  return flatbuffers::GetRoot<Effekseer::Data::NetworkProfileSample>(buf);
}

inline const Effekseer::Data::NetworkProfileSample *GetSizePrefixedNetworkProfileSample(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Effekseer::Data::NetworkProfileSample>(buf);
}

inline bool VerifyNetworkProfileSampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Effekseer::Data::NetworkProfileSample>(nullptr);
}

inline bool VerifySizePrefixedNetworkProfileSampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Effekseer::Data::NetworkProfileSample>(nullptr);
}

inline void FinishNetworkProfileSampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Effekseer::Data::NetworkProfileSample> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNetworkProfileSampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Effekseer::Data::NetworkProfileSample> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Data
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_PROFILER_EFFEKSEER_DATA_H_

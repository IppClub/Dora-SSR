/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora drawnode_type
func drawnode_type() => i32
#wa:import dora drawnode_set_depth_write
func drawnode_set_depth_write(slf: i64, val: i32);
#wa:import dora drawnode_is_depth_write
func drawnode_is_depth_write(slf: i64) => i32
#wa:import dora drawnode_set_blend_func
func drawnode_set_blend_func(slf: i64, val: i64);
#wa:import dora drawnode_get_blend_func
func drawnode_get_blend_func(slf: i64) => i64
#wa:import dora drawnode_draw_dot
func drawnode_draw_dot(slf: i64, pos: i64, radius: f32, color: i32)
#wa:import dora drawnode_draw_segment
func drawnode_draw_segment(slf: i64, from: i64, to: i64, radius: f32, color: i32)
#wa:import dora drawnode_draw_polygon
func drawnode_draw_polygon(slf: i64, verts: i64, fill_color: i32, border_width: f32, border_color: i32)
#wa:import dora drawnode_draw_vertices
func drawnode_draw_vertices(slf: i64, verts: i64)
#wa:import dora drawnode_clear
func drawnode_clear(slf: i64)
#wa:import dora drawnode_new
func drawnode_new() => i64
type DrawNode struct { Node }
func DrawNodeFrom(raw: i64) => *DrawNode {
	if raw == 0 {
		return nil
	}
	ObjectRetain(raw)
	object := DrawNode{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func DrawNode.GetTypeId() => i32 {
	return drawnode_type()
}
func ObjectAsDrawNode(object: Object) => *DrawNode {
	if object.GetTypeId() == drawnode_type() {
		return DrawNodeFrom(object.GetRaw())
	}
	return nil
}
func DrawNode.SetDepthWrite(val: bool) {
	drawnode_set_depth_write(*this.raw, ToDoraBool(val))
}
func DrawNode.IsDepthWrite() => bool {
	return drawnode_is_depth_write(*this.raw) != 0
}
func DrawNode.SetBlendFunc(val: BlendFunc) {
	drawnode_set_blend_func(*this.raw, val.ToValue())
}
func DrawNode.GetBlendFunc() => BlendFunc {
	return BlendFuncFrom(drawnode_get_blend_func(*this.raw))
}
func DrawNode.DrawDot(pos: Vec2, radius: f32, color: Color) {
	drawnode_draw_dot(*this.raw, pos.ToValue(), radius, color.ToARGB())
}
func DrawNode.DrawSegment(from: Vec2, to: Vec2, radius: f32, color: Color) {
	drawnode_draw_segment(*this.raw, from.ToValue(), to.ToValue(), radius, color.ToARGB())
}
func DrawNode.DrawPolygon(verts: *[]Vec2, fill_color: Color, border_width: f32, border_color: Color) {
	drawnode_draw_polygon(*this.raw, ToDoraVec2Buf(verts), fill_color.ToARGB(), border_width, border_color.ToARGB())
}
func DrawNode.DrawVertices(verts: *[]VertexColor) {
	drawnode_draw_vertices(*this.raw, ToDoraVertexColorBuf(verts))
}
func DrawNode.Clear() {
	drawnode_clear(*this.raw)
}
func NewDrawNode() => DrawNode {
	raw := drawnode_new()
	object := DrawNode{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
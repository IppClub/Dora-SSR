/* Copyright (c) 2025 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora view_get_size
func view_get_size() => i64
#wa:import dora view_get_standard_distance
func view_get_standard_distance() => f32
#wa:import dora view_get_aspect_ratio
func view_get_aspect_ratio() => f32
#wa:import dora view_set_near_plane_distance
func view_set_near_plane_distance(val: f32)
#wa:import dora view_get_near_plane_distance
func view_get_near_plane_distance() => f32
#wa:import dora view_set_far_plane_distance
func view_set_far_plane_distance(val: f32)
#wa:import dora view_get_far_plane_distance
func view_get_far_plane_distance() => f32
#wa:import dora view_set_field_of_view
func view_set_field_of_view(val: f32)
#wa:import dora view_get_field_of_view
func view_get_field_of_view() => f32
#wa:import dora view_set_scale
func view_set_scale(val: f32)
#wa:import dora view_get_scale
func view_get_scale() => f32
#wa:import dora view_set_post_effect
func view_set_post_effect(val: i64)
#wa:import dora view_get_post_effect
func view_get_post_effect() => i64
#wa:import dora view_set_post_effect_null
func view_set_post_effect_null()
#wa:import dora view_set_vsync
func view_set_vsync(val: i32)
#wa:import dora view_is_vsync
func view_is_vsync() => i32
type _View :struct { }
global View = _View{}
/// Gets the size of the view in pixels.
func _View.GetSize() => Size {
	return SizeFromValue(view_get_size())
}
/// Gets the standard distance of the view from the origin.
func _View.GetStandardDistance() => f32 {
	return view_get_standard_distance()
}
/// Gets the aspect ratio of the view.
func _View.GetAspectRatio() => f32 {
	return view_get_aspect_ratio()
}
/// Sets the distance to the near clipping plane.
func _View.SetNearPlaneDistance(val: f32) {
	view_set_near_plane_distance(val)
}
/// Gets the distance to the near clipping plane.
func _View.GetNearPlaneDistance() => f32 {
	return view_get_near_plane_distance()
}
/// Sets the distance to the far clipping plane.
func _View.SetFarPlaneDistance(val: f32) {
	view_set_far_plane_distance(val)
}
/// Gets the distance to the far clipping plane.
func _View.GetFarPlaneDistance() => f32 {
	return view_get_far_plane_distance()
}
/// Sets the field of view of the view in degrees.
func _View.SetFieldOfView(val: f32) {
	view_set_field_of_view(val)
}
/// Gets the field of view of the view in degrees.
func _View.GetFieldOfView() => f32 {
	return view_get_field_of_view()
}
/// Sets the scale factor of the view.
func _View.SetScale(val: f32) {
	view_set_scale(val)
}
/// Gets the scale factor of the view.
func _View.GetScale() => f32 {
	return view_get_scale()
}
/// Sets the post effect applied to the view.
func _View.SetPostEffect(val: SpriteEffect) {
	view_set_post_effect(val.GetRaw())
}
/// Gets the post effect applied to the view.
func _View.GetPostEffect() => *SpriteEffect {
	ptr_ := view_get_post_effect()
	if ptr_ == 0 {
		return nil
	}
	obj_ := *SpriteEffectFrom(ptr_)
	return &obj_
}
func _View.SetPostEffectNull() {
	view_set_post_effect_null()
}
/// Sets whether or not vertical sync is enabled.
func _View.SetVsync(val: bool) {
	view_set_vsync(ToDoraBool(val))
}
/// Gets whether or not vertical sync is enabled.
func _View.IsVsync() => bool {
	return view_is_vsync() != 0
}
/* Copyright (c) 2016-2025 Li Jin <dragon-fly@qq.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora spriteeffect_type
func spriteeffect_type() => i32

#wa:import dora spriteeffect_new
func spriteeffect_new(vert_shader: i64, frag_shader: i64) => i64

type SpriteEffect :struct{ Effect }

func SpriteEffectFrom(raw: i64) => *SpriteEffect {
	if raw == 0 {
		return nil
	}
	object := SpriteEffect{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func SpriteEffect.GetTypeId() => i32 {
	return spriteeffect_type()
}
func ObjectAsSpriteEffect(object: Object) => *SpriteEffect {
	if object.GetTypeId() == spriteeffect_type() {
		ObjectRetain(object.GetRaw())
		return SpriteEffectFrom(object.GetRaw())
	}
	return nil
}

/// A method that allows you to create a new SpriteEffect object.
///
/// # Arguments
///
/// * `vert_shader` - The vertex shader file string.
/// * `frag_shader` - The fragment shader file string. A shader file string must be one of the formats:
///     * "builtin:" + theBuiltinShaderName
///     * "Shader/compiled_shader_file.bin"
///
/// # Returns
///
/// * `SpriteEffect` - A new SpriteEffect object.
func NewSpriteEffect(vert_shader: string, frag_shader: string) => SpriteEffect {
	raw := spriteeffect_new(ToDoraString(vert_shader), ToDoraString(frag_shader))
	object := SpriteEffect{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}

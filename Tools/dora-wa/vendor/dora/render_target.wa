/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora rendertarget_type
func rendertarget_type() => i32
#wa:import dora rendertarget_get_width
func rendertarget_get_width(slf: i64) => i32
#wa:import dora rendertarget_get_height
func rendertarget_get_height(slf: i64) => i32
#wa:import dora rendertarget_set_camera
func rendertarget_set_camera(slf: i64, val: i64);
#wa:import dora rendertarget_get_camera
func rendertarget_get_camera(slf: i64) => i64
#wa:import dora rendertarget_get_texture
func rendertarget_get_texture(slf: i64) => i64
#wa:import dora rendertarget_render
func rendertarget_render(slf: i64, target: i64)
#wa:import dora rendertarget_render_clear
func rendertarget_render_clear(slf: i64, color: i32, depth: f32, stencil: i32)
#wa:import dora rendertarget_render_clear_with_target
func rendertarget_render_clear_with_target(slf: i64, target: i64, color: i32, depth: f32, stencil: i32)
#wa:import dora rendertarget_save_async
func rendertarget_save_async(slf: i64, filename: i64, func0: i32, stack0: i64)
#wa:import dora rendertarget_new
func rendertarget_new(width: i32, height: i32) => i64
type RenderTarget struct { Object }
func RenderTargetFrom(raw: i64) => *RenderTarget {
	if raw == 0 {
		return nil
	}
	ObjectRetain(raw)
	object := RenderTarget{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func RenderTarget.GetTypeId() => i32 {
	return rendertarget_type()
}
func ObjectAsRenderTarget(object: Object) => *RenderTarget {
	if object.GetTypeId() == rendertarget_type() {
		return RenderTargetFrom(object.GetRaw())
	}
	return nil
}
func RenderTarget.GetWidth() => i32 {
	return rendertarget_get_width(*this.raw)
}
func RenderTarget.GetHeight() => i32 {
	return rendertarget_get_height(*this.raw)
}
func RenderTarget.SetCamera(val: Camera) {
	rendertarget_set_camera(*this.raw, val.GetRaw())
}
func RenderTarget.GetCamera() => *Camera {
	ptr_ := rendertarget_get_camera(*this.raw)
	if ptr_ == 0 {
		return nil
	}
	obj_ := *CameraFrom(ptr_)
	return &obj_
}
func RenderTarget.GetTexture() => Texture2D {
	return *Texture2DFrom(rendertarget_get_texture(*this.raw))
}
func RenderTarget.Render(target: Node) {
	rendertarget_render(*this.raw, target.GetRaw())
}
func RenderTarget.RenderClear(color: Color, depth: f32, stencil: i32) {
	rendertarget_render_clear(*this.raw, color.ToARGB(), depth, stencil)
}
func RenderTarget.RenderClearWithTarget(target: Node, color: Color, depth: f32, stencil: i32) {
	rendertarget_render_clear_with_target(*this.raw, target.GetRaw(), color.ToARGB(), depth, stencil)
}
func RenderTarget.SaveAsync(filename: string, handler: func(success: bool)) {
	stack0 := NewCallStack()
	func_id0 := PushFunction(func() {
		success, _ := stack0.PopBool()
		handler(success)
	})
	rendertarget_save_async(*this.raw, ToDoraString(filename), func_id0, *stack0.raw)
}
func NewRenderTarget(width: i32, height: i32) => RenderTarget {
	raw := rendertarget_new(width, height)
	object := RenderTarget{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
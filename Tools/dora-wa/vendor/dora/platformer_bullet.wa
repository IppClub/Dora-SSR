/* Copyright (c) 2025 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora platformer_bullet_type
func platformer_bullet_type() => i32

#wa:import dora platformer_bullet_set_target_allow
func platformer_bullet_set_target_allow(slf: i64, val: i32)

#wa:import dora platformer_bullet_get_target_allow
func platformer_bullet_get_target_allow(slf: i64) => i32

#wa:import dora platformer_bullet_is_face_right
func platformer_bullet_is_face_right(slf: i64) => i32

#wa:import dora platformer_bullet_set_hit_stop
func platformer_bullet_set_hit_stop(slf: i64, val: i32)

#wa:import dora platformer_bullet_is_hit_stop
func platformer_bullet_is_hit_stop(slf: i64) => i32

#wa:import dora platformer_bullet_get_emitter
func platformer_bullet_get_emitter(slf: i64) => i64

#wa:import dora platformer_bullet_get_bullet_def
func platformer_bullet_get_bullet_def(slf: i64) => i64

#wa:import dora platformer_bullet_set_face
func platformer_bullet_set_face(slf: i64, val: i64)

#wa:import dora platformer_bullet_get_face
func platformer_bullet_get_face(slf: i64) => i64

#wa:import dora platformer_bullet_destroy
func platformer_bullet_destroy(slf: i64)

#wa:import dora platformer_bullet_new
func platformer_bullet_new(def: i64, owner: i64) => i64

type PlatformerBullet :struct{ Body }

func PlatformerBulletFrom(raw: i64) => *PlatformerBullet {
	if raw == 0 {
		return nil
	}
	object := PlatformerBullet{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func PlatformerBullet.GetTypeId() => i32 {
	return platformer_bullet_type()
}
func ObjectAsPlatformerBullet(object: Object) => *PlatformerBullet {
	if object.GetTypeId() == platformer_bullet_type() {
		ObjectRetain(object.GetRaw())
		return PlatformerBulletFrom(object.GetRaw())
	}
	return nil
}

/// Sets the value from a `Platformer.TargetAllow` object for the bullet object.
func PlatformerBullet.SetTargetAllow(val: i32) {
	platformer_bullet_set_target_allow(*this.raw, val)
}

/// Gets the value from a `Platformer.TargetAllow` object for the bullet object.
func PlatformerBullet.GetTargetAllow() => i32 {
	return platformer_bullet_get_target_allow(*this.raw)
}

/// Gets whether the bullet object is facing right.
func PlatformerBullet.IsFaceRight() => bool {
	return platformer_bullet_is_face_right(*this.raw) != 0
}

/// Sets whether the bullet object should stop on impact.
func PlatformerBullet.SetHitStop(val: bool) {
	platformer_bullet_set_hit_stop(*this.raw, ToDoraBool(val))
}

/// Gets whether the bullet object should stop on impact.
func PlatformerBullet.IsHitStop() => bool {
	return platformer_bullet_is_hit_stop(*this.raw) != 0
}

/// Gets the `Unit` object that fired the bullet.
func PlatformerBullet.GetEmitter() => PlatformerUnit {
	return *PlatformerUnitFrom(platformer_bullet_get_emitter(*this.raw))
}

/// Gets the `BulletDef` object that defines the bullet's properties and behavior.
func PlatformerBullet.GetBulletDef() => PlatformerBulletDef {
	return *PlatformerBulletDefFrom(platformer_bullet_get_bullet_def(*this.raw))
}

/// Sets the `Node` object that appears as the bullet's visual item.
func PlatformerBullet.SetFace(val: Node) {
	platformer_bullet_set_face(*this.raw, val.GetRaw())
}

/// Gets the `Node` object that appears as the bullet's visual item.
func PlatformerBullet.GetFace() => Node {
	return *NodeFrom(platformer_bullet_get_face(*this.raw))
}

/// Destroys the bullet object instance.
func PlatformerBullet.Destroy() {
	platformer_bullet_destroy(*this.raw)
}

/// A method that creates a new `Bullet` object instance with the specified `BulletDef` and `Unit` objects.
///
/// # Arguments
///
/// * `def` - The `BulletDef` object that defines the bullet's properties and behavior.
/// * `owner` - The `Unit` object that fired the bullet.
///
/// # Returns
///
/// * `Bullet` - The new `Bullet` object instance.
func NewPlatformerBullet(def: PlatformerBulletDef, owner: PlatformerUnit) => PlatformerBullet {
	raw := platformer_bullet_new(def.GetRaw(), owner.GetRaw())
	object := PlatformerBullet{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}

/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora spine_type
func spine_type() => i32
#wa:import dora spine_set_hit_test_enabled
func spine_set_hit_test_enabled(slf: i64, val: i32);
#wa:import dora spine_is_hit_test_enabled
func spine_is_hit_test_enabled(slf: i64) => i32
#wa:import dora spine_set_bone_rotation
func spine_set_bone_rotation(slf: i64, name: i64, rotation: f32) => i32
#wa:import dora spine_contains_point
func spine_contains_point(slf: i64, x: f32, y: f32) => i64
#wa:import dora spine_intersects_segment
func spine_intersects_segment(slf: i64, x_1: f32, y_1: f32, x_2: f32, y_2: f32) => i64
#wa:import dora spine_with_files
func spine_with_files(skel_file: i64, atlas_file: i64) => i64
#wa:import dora spine_new
func spine_new(spine_str: i64) => i64
#wa:import dora spine_get_looks
func spine_get_looks(spine_str: i64) => i64
#wa:import dora spine_get_animations
func spine_get_animations(spine_str: i64) => i64
type Spine struct { Playable }
func SpineFrom(raw: i64) => *Spine {
	if raw == 0 {
		return nil
	}
	object := Spine{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func Spine.GetTypeId() => i32 {
	return spine_type()
}
func Spine.SetHitTestEnabled(val: bool) {
	spine_set_hit_test_enabled(*this.raw, ToDoraBool(val))
}
func Spine.IsHitTestEnabled() => bool {
	return spine_is_hit_test_enabled(*this.raw) != 0
}
func Spine.SetBoneRotation(name: string, rotation: f32) => bool {
	return spine_set_bone_rotation(*this.raw, ToDoraString(name), rotation) != 0
}
func Spine.ContainsPoint(x: f32, y: f32) => string {
	return FromDoraString(spine_contains_point(*this.raw, x, y))
}
func Spine.IntersectsSegment(x_1: f32, y_1: f32, x_2: f32, y_2: f32) => string {
	return FromDoraString(spine_intersects_segment(*this.raw, x_1, y_1, x_2, y_2))
}
func NewSpineWithFiles(skel_file: string, atlas_file: string) => *Spine {
	raw := spine_with_files(ToDoraString(skel_file), ToDoraString(atlas_file))
	if raw == 0 {
		return nil
	}
	object := Spine{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}
func NewSpine(spine_str: string) => *Spine {
	raw := spine_new(ToDoraString(spine_str))
	if raw == 0 {
		return nil
	}
	object := Spine{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}
func SpineGetLooks(spine_str: string) => *[]string {
	return FromDoraStrBuf(spine_get_looks(ToDoraString(spine_str)))
}
func SpineGetAnimations(spine_str: string) => *[]string {
	return FromDoraStrBuf(spine_get_animations(ToDoraString(spine_str)))
}
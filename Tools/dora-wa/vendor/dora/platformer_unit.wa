/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora platformer_unit_type
func platformer_unit_type() => i32
#wa:import dora platformer_unit_set_playable
func platformer_unit_set_playable(slf: i64, val: i64);
#wa:import dora platformer_unit_get_playable
func platformer_unit_get_playable(slf: i64) => i64
#wa:import dora platformer_unit_set_detect_distance
func platformer_unit_set_detect_distance(slf: i64, val: f32);
#wa:import dora platformer_unit_get_detect_distance
func platformer_unit_get_detect_distance(slf: i64) => f32
#wa:import dora platformer_unit_set_attack_range
func platformer_unit_set_attack_range(slf: i64, val: i64);
#wa:import dora platformer_unit_get_attack_range
func platformer_unit_get_attack_range(slf: i64) => i64
#wa:import dora platformer_unit_set_face_right
func platformer_unit_set_face_right(slf: i64, val: i32);
#wa:import dora platformer_unit_is_face_right
func platformer_unit_is_face_right(slf: i64) => i32
#wa:import dora platformer_unit_set_receiving_decision_trace
func platformer_unit_set_receiving_decision_trace(slf: i64, val: i32);
#wa:import dora platformer_unit_is_receiving_decision_trace
func platformer_unit_is_receiving_decision_trace(slf: i64) => i32
#wa:import dora platformer_unit_set_decision_tree
func platformer_unit_set_decision_tree(slf: i64, val: i64);
#wa:import dora platformer_unit_get_decision_tree
func platformer_unit_get_decision_tree(slf: i64) => i64
#wa:import dora platformer_unit_is_on_surface
func platformer_unit_is_on_surface(slf: i64) => i32
#wa:import dora platformer_unit_get_ground_sensor
func platformer_unit_get_ground_sensor(slf: i64) => i64
#wa:import dora platformer_unit_get_detect_sensor
func platformer_unit_get_detect_sensor(slf: i64) => i64
#wa:import dora platformer_unit_get_attack_sensor
func platformer_unit_get_attack_sensor(slf: i64) => i64
#wa:import dora platformer_unit_get_unit_def
func platformer_unit_get_unit_def(slf: i64) => i64
#wa:import dora platformer_unit_get_current_action
func platformer_unit_get_current_action(slf: i64) => i64
#wa:import dora platformer_unit_get_width
func platformer_unit_get_width(slf: i64) => f32
#wa:import dora platformer_unit_get_height
func platformer_unit_get_height(slf: i64) => f32
#wa:import dora platformer_unit_get_entity
func platformer_unit_get_entity(slf: i64) => i64
#wa:import dora platformer_unit_attach_action
func platformer_unit_attach_action(slf: i64, name: i64) => i64
#wa:import dora platformer_unit_remove_action
func platformer_unit_remove_action(slf: i64, name: i64)
#wa:import dora platformer_unit_remove_all_actions
func platformer_unit_remove_all_actions(slf: i64)
#wa:import dora platformer_unit_get_action
func platformer_unit_get_action(slf: i64, name: i64) => i64
#wa:import dora platformer_unit_each_action
func platformer_unit_each_action(slf: i64, func0: i32, stack0: i64)
#wa:import dora platformer_unit_start
func platformer_unit_start(slf: i64, name: i64) => i32
#wa:import dora platformer_unit_stop
func platformer_unit_stop(slf: i64)
#wa:import dora platformer_unit_is_doing
func platformer_unit_is_doing(slf: i64, name: i64) => i32
#wa:import dora platformer_unit_new
func platformer_unit_new(unit_def: i64, physics_world: i64, entity: i64, pos: i64, rot: f32) => i64
#wa:import dora platformer_unit_with_store
func platformer_unit_with_store(unit_def_name: i64, physics_world_name: i64, entity: i64, pos: i64, rot: f32) => i64
type PlatformerUnit struct { Body }
func PlatformerUnitFrom(raw: i64) => *PlatformerUnit {
	if raw == 0 {
		return nil
	}
	object := PlatformerUnit{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func PlatformerUnit.GetTypeId() => i32 {
	return platformer_unit_type()
}
func PlatformerUnit.SetPlayable(val: Playable) {
	platformer_unit_set_playable(*this.raw, val.GetRaw())
}
func PlatformerUnit.GetPlayable() => Playable {
	return *PlayableFrom(platformer_unit_get_playable(*this.raw))
}
func PlatformerUnit.SetDetectDistance(val: f32) {
	platformer_unit_set_detect_distance(*this.raw, val)
}
func PlatformerUnit.GetDetectDistance() => f32 {
	return platformer_unit_get_detect_distance(*this.raw)
}
func PlatformerUnit.SetAttackRange(val: Size) {
	platformer_unit_set_attack_range(*this.raw, val.ToValue())
}
func PlatformerUnit.GetAttackRange() => Size {
	return SizeFromValue(platformer_unit_get_attack_range(*this.raw))
}
func PlatformerUnit.SetFaceRight(val: bool) {
	platformer_unit_set_face_right(*this.raw, ToDoraBool(val))
}
func PlatformerUnit.IsFaceRight() => bool {
	return platformer_unit_is_face_right(*this.raw) != 0
}
func PlatformerUnit.SetReceivingDecisionTrace(val: bool) {
	platformer_unit_set_receiving_decision_trace(*this.raw, ToDoraBool(val))
}
func PlatformerUnit.IsReceivingDecisionTrace() => bool {
	return platformer_unit_is_receiving_decision_trace(*this.raw) != 0
}
func PlatformerUnit.SetDecisionTree(val: string) {
	platformer_unit_set_decision_tree(*this.raw, ToDoraString(val))
}
func PlatformerUnit.GetDecisionTree() => string {
	return FromDoraString(platformer_unit_get_decision_tree(*this.raw))
}
func PlatformerUnit.IsOnSurface() => bool {
	return platformer_unit_is_on_surface(*this.raw) != 0
}
func PlatformerUnit.GetGroundSensor() => Sensor {
	return *SensorFrom(platformer_unit_get_ground_sensor(*this.raw))
}
func PlatformerUnit.GetDetectSensor() => Sensor {
	return *SensorFrom(platformer_unit_get_detect_sensor(*this.raw))
}
func PlatformerUnit.GetAttackSensor() => Sensor {
	return *SensorFrom(platformer_unit_get_attack_sensor(*this.raw))
}
func PlatformerUnit.GetUnitDef() => Dictionary {
	return *DictionaryFrom(platformer_unit_get_unit_def(*this.raw))
}
func PlatformerUnit.GetCurrentAction() => PlatformerUnitAction {
	return *PlatformerUnitActionFrom(platformer_unit_get_current_action(*this.raw))
}
func PlatformerUnit.GetWidth() => f32 {
	return platformer_unit_get_width(*this.raw)
}
func PlatformerUnit.GetHeight() => f32 {
	return platformer_unit_get_height(*this.raw)
}
func PlatformerUnit.GetEntity() => Entity {
	return *EntityFrom(platformer_unit_get_entity(*this.raw))
}
func PlatformerUnit.AttachAction(name: string) => PlatformerUnitAction {
	return *PlatformerUnitActionFrom(platformer_unit_attach_action(*this.raw, ToDoraString(name)))
}
func PlatformerUnit.RemoveAction(name: string) {
	platformer_unit_remove_action(*this.raw, ToDoraString(name))
}
func PlatformerUnit.RemoveAllActions() {
	platformer_unit_remove_all_actions(*this.raw)
}
func PlatformerUnit.GetAction(name: string) => *PlatformerUnitAction {
	ptr_ := platformer_unit_get_action(*this.raw, ToDoraString(name))
	if ptr_ == 0 {
		return nil
	}
	obj_ := *PlatformerUnitActionFrom(ptr_)
	return &obj_
}
func PlatformerUnit.EachAction(visitor_func: func(action: PlatformerUnitAction)) {
	stack0 := NewCallStack()
	func_id0 := PushFunction(func() {
		action_raw, _ := stack0.PopI64()
		action := *PlatformerUnitActionFrom(action_raw)
		visitor_func(action)
	})
	platformer_unit_each_action(*this.raw, func_id0, *stack0.raw)
}
func PlatformerUnit.Start(name: string) => bool {
	return platformer_unit_start(*this.raw, ToDoraString(name)) != 0
}
func PlatformerUnit.Stop() {
	platformer_unit_stop(*this.raw)
}
func PlatformerUnit.IsDoing(name: string) => bool {
	return platformer_unit_is_doing(*this.raw, ToDoraString(name)) != 0
}
func NewPlatformerUnit(unit_def: Dictionary, physics_world: PhysicsWorld, entity: Entity, pos: Vec2, rot: f32) => PlatformerUnit {
	raw := platformer_unit_new(unit_def.GetRaw(), physics_world.GetRaw(), entity.GetRaw(), pos.ToValue(), rot)
	object := PlatformerUnit{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
func NewPlatformerUnitWithStore(unit_def_name: string, physics_world_name: string, entity: Entity, pos: Vec2, rot: f32) => PlatformerUnit {
	raw := platformer_unit_with_store(ToDoraString(unit_def_name), ToDoraString(physics_world_name), entity.GetRaw(), pos.ToValue(), rot)
	object := PlatformerUnit{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
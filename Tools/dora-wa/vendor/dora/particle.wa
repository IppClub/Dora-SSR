/* Copyright (c) 2016-2025 Li Jin <dragon-fly@qq.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora particle_type
func particle_type() => i32

#wa:import dora particlenode_is_active
func particlenode_is_active(slf: i64) => i32

#wa:import dora particlenode_start
func particlenode_start(slf: i64)

#wa:import dora particlenode_stop
func particlenode_stop(slf: i64)

#wa:import dora particlenode_new
func particlenode_new(filename: i64) => i64

type Particle :struct{ Node }

func ParticleFrom(raw: i64) => *Particle {
	if raw == 0 {
		return nil
	}
	object := Particle{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func Particle.GetTypeId() => i32 {
	return particle_type()
}
func ObjectAsParticle(object: Object) => *Particle {
	if object.GetTypeId() == particle_type() {
		ObjectRetain(object.GetRaw())
		return ParticleFrom(object.GetRaw())
	}
	return nil
}

/// Gets whether the particle system is active.
func Particle.IsActive() => bool {
	return particlenode_is_active(*this.raw) != 0
}

/// Starts emitting particles.
func Particle.Start() {
	particlenode_start(*this.raw)
}

/// Stops emitting particles and wait for all active particles to end their lives.
func Particle.Stop() {
	particlenode_stop(*this.raw)
}

/// Creates a new Particle object from a particle system file.
///
/// # Arguments
///
/// * `filename` - The file path of the particle system file.
///
/// # Returns
///
/// * A new `Particle` object.
func NewParticle(filename: string) => *Particle {
	raw := particlenode_new(ToDoraString(filename))
	if raw == 0 {
		return nil
	}
	object := Particle{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}

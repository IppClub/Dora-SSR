/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora dragonbone_type
func dragonbone_type() => i32
#wa:import dora dragonbone_set_hit_test_enabled
func dragonbone_set_hit_test_enabled(slf: i64, val: i32);
#wa:import dora dragonbone_is_hit_test_enabled
func dragonbone_is_hit_test_enabled(slf: i64) => i32
#wa:import dora dragonbone_contains_point
func dragonbone_contains_point(slf: i64, x: f32, y: f32) => i64
#wa:import dora dragonbone_intersects_segment
func dragonbone_intersects_segment(slf: i64, x_1: f32, y_1: f32, x_2: f32, y_2: f32) => i64
#wa:import dora dragonbone_with_files
func dragonbone_with_files(bone_file: i64, atlas_file: i64) => i64
#wa:import dora dragonbone_new
func dragonbone_new(bone_str: i64) => i64
#wa:import dora dragonbone_get_looks
func dragonbone_get_looks(bone_str: i64) => i64
#wa:import dora dragonbone_get_animations
func dragonbone_get_animations(bone_str: i64) => i64
type DragonBone struct { Playable }
func DragonBoneFrom(raw: i64) => *DragonBone {
	if raw == 0 {
		return nil
	}
	ObjectRetain(raw)
	object := DragonBone{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func DragonBone.GetTypeId() => i32 {
	return dragonbone_type()
}
func ObjectAsDragonBone(object: Object) => *DragonBone {
	if object.GetTypeId() == dragonbone_type() {
		return DragonBoneFrom(object.GetRaw())
	}
	return nil
}
func DragonBone.SetHitTestEnabled(val: bool) {
	dragonbone_set_hit_test_enabled(*this.raw, ToDoraBool(val))
}
func DragonBone.IsHitTestEnabled() => bool {
	return dragonbone_is_hit_test_enabled(*this.raw) != 0
}
func DragonBone.ContainsPoint(x: f32, y: f32) => string {
	return FromDoraString(dragonbone_contains_point(*this.raw, x, y))
}
func DragonBone.IntersectsSegment(x_1: f32, y_1: f32, x_2: f32, y_2: f32) => string {
	return FromDoraString(dragonbone_intersects_segment(*this.raw, x_1, y_1, x_2, y_2))
}
func NewDragonBoneWithFiles(bone_file: string, atlas_file: string) => *DragonBone {
	raw := dragonbone_with_files(ToDoraString(bone_file), ToDoraString(atlas_file))
	if raw == 0 {
		return nil
	}
	object := DragonBone{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}
func NewDragonBone(bone_str: string) => *DragonBone {
	raw := dragonbone_new(ToDoraString(bone_str))
	if raw == 0 {
		return nil
	}
	object := DragonBone{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}
func DragonBoneGetLooks(bone_str: string) => *[]string {
	return FromDoraStrBuf(dragonbone_get_looks(ToDoraString(bone_str)))
}
func DragonBoneGetAnimations(bone_str: string) => *[]string {
	return FromDoraStrBuf(dragonbone_get_animations(ToDoraString(bone_str)))
}
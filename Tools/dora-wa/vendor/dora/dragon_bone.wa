/* Copyright (c) 2025 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora dragonbone_type
func dragonbone_type() => i32

#wa:import dora dragonbone_set_hit_test_enabled
func dragonbone_set_hit_test_enabled(slf: i64, val: i32)

#wa:import dora dragonbone_is_hit_test_enabled
func dragonbone_is_hit_test_enabled(slf: i64) => i32

#wa:import dora dragonbone_contains_point
func dragonbone_contains_point(slf: i64, x: f32, y: f32) => i64

#wa:import dora dragonbone_intersects_segment
func dragonbone_intersects_segment(slf: i64, x_1: f32, y_1: f32, x_2: f32, y_2: f32) => i64

#wa:import dora dragonbone_with_files
func dragonbone_with_files(bone_file: i64, atlas_file: i64) => i64

#wa:import dora dragonbone_new
func dragonbone_new(bone_str: i64) => i64

#wa:import dora dragonbone_get_looks
func dragonbone_get_looks(bone_str: i64) => i64

#wa:import dora dragonbone_get_animations
func dragonbone_get_animations(bone_str: i64) => i64

type DragonBone :struct{ Playable }

func DragonBoneFrom(raw: i64) => *DragonBone {
	if raw == 0 {
		return nil
	}
	object := DragonBone{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func DragonBone.GetTypeId() => i32 {
	return dragonbone_type()
}
func ObjectAsDragonBone(object: Object) => *DragonBone {
	if object.GetTypeId() == dragonbone_type() {
		ObjectRetain(object.GetRaw())
		return DragonBoneFrom(object.GetRaw())
	}
	return nil
}

/// Sets whether hit testing is enabled.
func DragonBone.SetHitTestEnabled(val: bool) {
	dragonbone_set_hit_test_enabled(*this.raw, ToDoraBool(val))
}

/// Gets whether hit testing is enabled.
func DragonBone.IsHitTestEnabled() => bool {
	return dragonbone_is_hit_test_enabled(*this.raw) != 0
}

/// Checks if a point is inside the boundaries of the instance and returns the name of the bone or slot at that point, or `None` if no bone or slot is found.
///
/// # Arguments
///
/// * `x` - The x-coordinate of the point to check.
/// * `y` - The y-coordinate of the point to check.
///
/// # Returns
///
/// * `String` - The name of the bone or slot at the point.
func DragonBone.ContainsPoint(x: f32, y: f32) => string {
	return FromDoraString(dragonbone_contains_point(*this.raw, x, y))
}

/// Checks if a line segment intersects the boundaries of the instance and returns the name of the bone or slot at the intersection point, or `None` if no bone or slot is found.
///
/// # Arguments
///
/// * `x1` - The x-coordinate of the start point of the line segment.
/// * `y1` - The y-coordinate of the start point of the line segment.
/// * `x2` - The x-coordinate of the end point of the line segment.
/// * `y2` - The y-coordinate of the end point of the line segment.
///
/// # Returns
///
/// * `String` - The name of the bone or slot at the intersection point.
func DragonBone.IntersectsSegment(x_1: f32, y_1: f32, x_2: f32, y_2: f32) => string {
	return FromDoraString(dragonbone_intersects_segment(*this.raw, x_1, y_1, x_2, y_2))
}

/// Creates a new instance of 'DragonBone' using the specified bone file and atlas file. This function only loads the first armature.
///
/// # Arguments
///
/// * `bone_file` - The filename of the bone file to load.
/// * `atlas_file` - The filename of the atlas file to load.
///
/// # Returns
///
/// * A new instance of 'DragonBone' with the specified bone file and atlas file. Returns `None` if the bone file or atlas file is not found.
func NewDragonBoneWithFiles(bone_file: string, atlas_file: string) => *DragonBone {
	raw := dragonbone_with_files(ToDoraString(bone_file), ToDoraString(atlas_file))
	if raw == 0 {
		return nil
	}
	object := DragonBone{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}

/// Creates a new instance of 'DragonBone' using the specified bone string.
///
/// # Arguments
///
/// * `bone_str` - The DragonBone file string for the new instance. A DragonBone file string can be a file path with the target file extension like "DragonBone/item" or file paths with all the related files like "DragonBone/item_ske.json|DragonBone/item_tex.json". An armature name can be added following a separator of ';'. like "DragonBone/item;mainArmature" or "DragonBone/item_ske.json|DragonBone/item_tex.json;mainArmature".
///
/// # Returns
///
/// * A new instance of 'DragonBone'. Returns `None` if the bone file or atlas file is not found.
func NewDragonBone(bone_str: string) => *DragonBone {
	raw := dragonbone_new(ToDoraString(bone_str))
	if raw == 0 {
		return nil
	}
	object := DragonBone{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}

/// Returns a list of available looks for the specified DragonBone file string.
///
/// # Arguments
///
/// * `bone_str` - The DragonBone file string to get the looks for.
///
/// # Returns
///
/// * A `Vec<String>` representing the available looks.
func DragonBoneGetLooks(bone_str: string) => *[]string {
	return FromDoraStrBuf(dragonbone_get_looks(ToDoraString(bone_str)))
}

/// Returns a list of available animations for the specified DragonBone file string.
///
/// # Arguments
///
/// * `bone_str` - The DragonBone file string to get the animations for.
///
/// # Returns
///
/// * A `Vec<String>` representing the available animations.
func DragonBoneGetAnimations(bone_str: string) => *[]string {
	return FromDoraStrBuf(dragonbone_get_animations(ToDoraString(bone_str)))
}

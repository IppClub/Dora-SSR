/* Copyright (c) 2025 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora rect_release
func rect_release(raw: i64)
#wa:import dora rect_set_origin
func rect_set_origin(slf: i64, val: i64);
#wa:import dora rect_get_origin
func rect_get_origin(slf: i64) => i64
#wa:import dora rect_set_size
func rect_set_size(slf: i64, val: i64);
#wa:import dora rect_get_size
func rect_get_size(slf: i64) => i64
#wa:import dora rect_set_x
func rect_set_x(slf: i64, val: f32);
#wa:import dora rect_get_x
func rect_get_x(slf: i64) => f32
#wa:import dora rect_set_y
func rect_set_y(slf: i64, val: f32);
#wa:import dora rect_get_y
func rect_get_y(slf: i64) => f32
#wa:import dora rect_set_width
func rect_set_width(slf: i64, val: f32);
#wa:import dora rect_get_width
func rect_get_width(slf: i64) => f32
#wa:import dora rect_set_height
func rect_set_height(slf: i64, val: f32);
#wa:import dora rect_get_height
func rect_get_height(slf: i64) => f32
#wa:import dora rect_set_left
func rect_set_left(slf: i64, val: f32);
#wa:import dora rect_get_left
func rect_get_left(slf: i64) => f32
#wa:import dora rect_set_right
func rect_set_right(slf: i64, val: f32);
#wa:import dora rect_get_right
func rect_get_right(slf: i64) => f32
#wa:import dora rect_set_center_x
func rect_set_center_x(slf: i64, val: f32);
#wa:import dora rect_get_center_x
func rect_get_center_x(slf: i64) => f32
#wa:import dora rect_set_center_y
func rect_set_center_y(slf: i64, val: f32);
#wa:import dora rect_get_center_y
func rect_get_center_y(slf: i64) => f32
#wa:import dora rect_set_bottom
func rect_set_bottom(slf: i64, val: f32);
#wa:import dora rect_get_bottom
func rect_get_bottom(slf: i64) => f32
#wa:import dora rect_set_top
func rect_set_top(slf: i64, val: f32);
#wa:import dora rect_get_top
func rect_get_top(slf: i64) => f32
#wa:import dora rect_set_lower_bound
func rect_set_lower_bound(slf: i64, val: i64);
#wa:import dora rect_get_lower_bound
func rect_get_lower_bound(slf: i64) => i64
#wa:import dora rect_set_upper_bound
func rect_set_upper_bound(slf: i64, val: i64);
#wa:import dora rect_get_upper_bound
func rect_get_upper_bound(slf: i64) => i64
#wa:import dora rect_set
func rect_set(slf: i64, x: f32, y: f32, width: f32, height: f32)
#wa:import dora rect_contains_point
func rect_contains_point(slf: i64, point: i64) => i32
#wa:import dora rect_intersects_rect
func rect_intersects_rect(slf: i64, rect: i64) => i32
#wa:import dora rect_equals
func rect_equals(slf: i64, other: i64) => i32
#wa:import dora rect_new
func rect_new(origin: i64, size: i64) => i64
#wa:import dora rect_zero
func rect_zero() => i64
type Rect :struct { raw: *i64 }
func Rect.GetRaw() => i64 {
	return *this.raw
}
func rect_finalizer(ptr: u32) {
	rect_release(GetPtr(ptr))
}
func RectFrom(raw: i64) => *Rect {
	if raw == 0 {
		return nil
	}
	item := Rect{}
	item.raw = &raw
	setFinalizer(item.raw, rect_finalizer)
	result := &item
	return result
}
/// Sets the position of the origin of the rectangle.
func Rect.SetOrigin(val: Vec2) {
	rect_set_origin(*this.raw, val.ToValue())
}
/// Gets the position of the origin of the rectangle.
func Rect.GetOrigin() => Vec2 {
	return Vec2FromValue(rect_get_origin(*this.raw))
}
/// Sets the dimensions of the rectangle.
func Rect.SetSize(val: Size) {
	rect_set_size(*this.raw, val.ToValue())
}
/// Gets the dimensions of the rectangle.
func Rect.GetSize() => Size {
	return SizeFromValue(rect_get_size(*this.raw))
}
/// Sets the x-coordinate of the origin of the rectangle.
func Rect.SetX(val: f32) {
	rect_set_x(*this.raw, val)
}
/// Gets the x-coordinate of the origin of the rectangle.
func Rect.GetX() => f32 {
	return rect_get_x(*this.raw)
}
/// Sets the y-coordinate of the origin of the rectangle.
func Rect.SetY(val: f32) {
	rect_set_y(*this.raw, val)
}
/// Gets the y-coordinate of the origin of the rectangle.
func Rect.GetY() => f32 {
	return rect_get_y(*this.raw)
}
/// Sets the width of the rectangle.
func Rect.SetWidth(val: f32) {
	rect_set_width(*this.raw, val)
}
/// Gets the width of the rectangle.
func Rect.GetWidth() => f32 {
	return rect_get_width(*this.raw)
}
/// Sets the height of the rectangle.
func Rect.SetHeight(val: f32) {
	rect_set_height(*this.raw, val)
}
/// Gets the height of the rectangle.
func Rect.GetHeight() => f32 {
	return rect_get_height(*this.raw)
}
/// Sets the left edge in x-axis of the rectangle.
func Rect.SetLeft(val: f32) {
	rect_set_left(*this.raw, val)
}
/// Gets the left edge in x-axis of the rectangle.
func Rect.GetLeft() => f32 {
	return rect_get_left(*this.raw)
}
/// Sets the right edge in x-axis of the rectangle.
func Rect.SetRight(val: f32) {
	rect_set_right(*this.raw, val)
}
/// Gets the right edge in x-axis of the rectangle.
func Rect.GetRight() => f32 {
	return rect_get_right(*this.raw)
}
/// Sets the x-coordinate of the center of the rectangle.
func Rect.SetCenterX(val: f32) {
	rect_set_center_x(*this.raw, val)
}
/// Gets the x-coordinate of the center of the rectangle.
func Rect.GetCenterX() => f32 {
	return rect_get_center_x(*this.raw)
}
/// Sets the y-coordinate of the center of the rectangle.
func Rect.SetCenterY(val: f32) {
	rect_set_center_y(*this.raw, val)
}
/// Gets the y-coordinate of the center of the rectangle.
func Rect.GetCenterY() => f32 {
	return rect_get_center_y(*this.raw)
}
/// Sets the bottom edge in y-axis of the rectangle.
func Rect.SetBottom(val: f32) {
	rect_set_bottom(*this.raw, val)
}
/// Gets the bottom edge in y-axis of the rectangle.
func Rect.GetBottom() => f32 {
	return rect_get_bottom(*this.raw)
}
/// Sets the top edge in y-axis of the rectangle.
func Rect.SetTop(val: f32) {
	rect_set_top(*this.raw, val)
}
/// Gets the top edge in y-axis of the rectangle.
func Rect.GetTop() => f32 {
	return rect_get_top(*this.raw)
}
/// Sets the lower bound (left-bottom) of the rectangle.
func Rect.SetLowerBound(val: Vec2) {
	rect_set_lower_bound(*this.raw, val.ToValue())
}
/// Gets the lower bound (left-bottom) of the rectangle.
func Rect.GetLowerBound() => Vec2 {
	return Vec2FromValue(rect_get_lower_bound(*this.raw))
}
/// Sets the upper bound (right-top) of the rectangle.
func Rect.SetUpperBound(val: Vec2) {
	rect_set_upper_bound(*this.raw, val.ToValue())
}
/// Gets the upper bound (right-top) of the rectangle.
func Rect.GetUpperBound() => Vec2 {
	return Vec2FromValue(rect_get_upper_bound(*this.raw))
}
/// Sets the properties of the rectangle.
///
/// # Arguments
///
/// * `x` - The x-coordinate of the origin of the rectangle.
/// * `y` - The y-coordinate of the origin of the rectangle.
/// * `width` - The width of the rectangle.
/// * `height` - The height of the rectangle.
func Rect.Set(x: f32, y: f32, width: f32, height: f32) {
	rect_set(*this.raw, x, y, width, height)
}
/// Checks if a point is inside the rectangle.
///
/// # Arguments
///
/// * `point` - The point to check, represented by a Vec2 object.
///
/// # Returns
///
/// * `bool` - Whether or not the point is inside the rectangle.
func Rect.ContainsPoint(point: Vec2) => bool {
	return rect_contains_point(*this.raw, point.ToValue()) != 0
}
/// Checks if the rectangle intersects with another rectangle.
///
/// # Arguments
///
/// * `rect` - The other rectangle to check for intersection with, represented by a Rect object.
///
/// # Returns
///
/// * `bool` - Whether or not the rectangles intersect.
func Rect.IntersectsRect(rect: Rect) => bool {
	return rect_intersects_rect(*this.raw, rect.GetRaw()) != 0
}
/// Checks if two rectangles are equal.
///
/// # Arguments
///
/// * `other` - The other rectangle to compare to, represented by a Rect object.
///
/// # Returns
///
/// * `bool` - Whether or not the two rectangles are equal.
func Rect.Equals(other: Rect) => bool {
	return rect_equals(*this.raw, other.GetRaw()) != 0
}
/// Creates a new rectangle object using a Vec2 object for the origin and a Size object for the size.
///
/// # Arguments
///
/// * `origin` - The origin of the rectangle, represented by a Vec2 object.
/// * `size` - The size of the rectangle, represented by a Size object.
///
/// # Returns
///
/// * `Rect` - A new rectangle object.
func NewRect(origin: Vec2, size: Size) => Rect {
	raw := rect_new(origin.ToValue(), size.ToValue())
	object := Rect{}
	object.raw = &raw
	setFinalizer(object.raw, rect_finalizer)
	return object
}
/// Gets a rectangle object with all properties set to 0.
func RectZero() => Rect {
	return *RectFrom(rect_zero())
}
/* Copyright (c) 2025 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora scheduler_type
func scheduler_type() => i32

#wa:import dora scheduler_set_time_scale
func scheduler_set_time_scale(slf: i64, val: f32)

#wa:import dora scheduler_get_time_scale
func scheduler_get_time_scale(slf: i64) => f32

#wa:import dora scheduler_set_fixed_fps
func scheduler_set_fixed_fps(slf: i64, val: i32)

#wa:import dora scheduler_get_fixed_fps
func scheduler_get_fixed_fps(slf: i64) => i32

#wa:import dora scheduler_update
func scheduler_update(slf: i64, delta_time: f64) => i32

#wa:import dora scheduler_new
func scheduler_new() => i64

type Scheduler :struct{ Object }

func SchedulerFrom(raw: i64) => *Scheduler {
	if raw == 0 {
		return nil
	}
	object := Scheduler{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func Scheduler.GetTypeId() => i32 {
	return scheduler_type()
}
func ObjectAsScheduler(object: Object) => *Scheduler {
	if object.GetTypeId() == scheduler_type() {
		ObjectRetain(object.GetRaw())
		return SchedulerFrom(object.GetRaw())
	}
	return nil
}

/// Sets the time scale factor for the scheduler.
/// This factor is applied to deltaTime that the scheduled functions will receive.
func Scheduler.SetTimeScale(val: f32) {
	scheduler_set_time_scale(*this.raw, val)
}

/// Gets the time scale factor for the scheduler.
/// This factor is applied to deltaTime that the scheduled functions will receive.
func Scheduler.GetTimeScale() => f32 {
	return scheduler_get_time_scale(*this.raw)
}

/// Sets the target frame rate (in frames per second) for a fixed update mode.
/// The fixed update will ensure a constant frame rate, and the operation handled in a fixed update can use a constant delta time value.
/// It is used for preventing weird behavior of a physics engine or synchronizing some states via network communications.
func Scheduler.SetFixedFps(val: i32) {
	scheduler_set_fixed_fps(*this.raw, val)
}

/// Gets the target frame rate (in frames per second) for a fixed update mode.
/// The fixed update will ensure a constant frame rate, and the operation handled in a fixed update can use a constant delta time value.
/// It is used for preventing weird behavior of a physics engine or synchronizing some states via network communications.
func Scheduler.GetFixedFps() => i32 {
	return scheduler_get_fixed_fps(*this.raw)
}

/// Used for manually updating the scheduler if it is created by the user.
///
/// # Arguments
///
/// * `deltaTime` - The time in seconds since the last frame update.
///
/// # Returns
///
/// * `bool` - `true` if the scheduler was stoped, `false` otherwise.
func Scheduler.Update(delta_time: f64) => bool {
	return scheduler_update(*this.raw, delta_time) != 0
}

/// Creates a new Scheduler object.
func NewScheduler() => Scheduler {
	raw := scheduler_new()
	object := Scheduler{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}

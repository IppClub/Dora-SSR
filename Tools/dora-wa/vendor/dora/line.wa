/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora line_type
func line_type() => i32
#wa:import dora line_set_depth_write
func line_set_depth_write(slf: i64, val: i32);
#wa:import dora line_is_depth_write
func line_is_depth_write(slf: i64) => i32
#wa:import dora line_set_blend_func
func line_set_blend_func(slf: i64, val: i64);
#wa:import dora line_get_blend_func
func line_get_blend_func(slf: i64) => i64
#wa:import dora line_add
func line_add(slf: i64, verts: i64, color: i32)
#wa:import dora line_set
func line_set(slf: i64, verts: i64, color: i32)
#wa:import dora line_clear
func line_clear(slf: i64)
#wa:import dora line_new
func line_new() => i64
#wa:import dora line_with_vec_color
func line_with_vec_color(verts: i64, color: i32) => i64
type Line struct { Node }
func LineFrom(raw: i64) => *Line {
	if raw == 0 {
		return nil
	}
	ObjectRetain(raw)
	object := Line{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func Line.GetTypeId() => i32 {
	return line_type()
}
func ObjectAsLine(object: Object) => *Line {
	if object.GetTypeId() == line_type() {
		return LineFrom(object.GetRaw())
	}
	return nil
}
/// Sets whether the depth should be written. (Default is false)
func Line.SetDepthWrite(val: bool) {
	line_set_depth_write(*this.raw, ToDoraBool(val))
}
/// Gets whether the depth should be written. (Default is false)
func Line.IsDepthWrite() => bool {
	return line_is_depth_write(*this.raw) != 0
}
/// Sets the blend function for the line node.
func Line.SetBlendFunc(val: BlendFunc) {
	line_set_blend_func(*this.raw, val.ToValue())
}
/// Gets the blend function for the line node.
func Line.GetBlendFunc() => BlendFunc {
	return BlendFuncFrom(line_get_blend_func(*this.raw))
}
/// Adds vertices to the line.
///
/// # Arguments
///
/// * `verts` - A vector of vertices to add to the line.
/// * `color` - Optional. The color of the line.
func Line.Add(verts: *[]Vec2, color: Color) {
	line_add(*this.raw, ToDoraVec2Buf(verts), color.ToARGB())
}
/// Sets vertices of the line.
///
/// # Arguments
///
/// * `verts` - A vector of vertices to set.
/// * `color` - Optional. The color of the line.
func Line.Set(verts: *[]Vec2, color: Color) {
	line_set(*this.raw, ToDoraVec2Buf(verts), color.ToARGB())
}
/// Clears all the vertices of line.
func Line.Clear() {
	line_clear(*this.raw)
}
/// Creates and returns a new empty Line object.
///
/// # Returns
///
/// * A new `Line` object.
func NewLine() => Line {
	raw := line_new()
	object := Line{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
/// Creates and returns a new Line object.
///
/// # Arguments
///
/// * `verts` - A vector of vertices to add to the line.
/// * `color` - The color of the line.
///
/// # Returns
///
/// * A new `Line` object.
func NewLineWithVecColor(verts: *[]Vec2, color: Color) => Line {
	raw := line_with_vec_color(ToDoraVec2Buf(verts), color.ToARGB())
	object := Line{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
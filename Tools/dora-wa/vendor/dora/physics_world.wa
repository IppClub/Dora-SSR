/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora physicsworld_type
func physicsworld_type() => i32
#wa:import dora physicsworld_query
func physicsworld_query(slf: i64, rect: i64, func0: i32, stack0: i64) => i32
#wa:import dora physicsworld_raycast
func physicsworld_raycast(slf: i64, start: i64, stop: i64, closest: i32, func0: i32, stack0: i64) => i32
#wa:import dora physicsworld_set_iterations
func physicsworld_set_iterations(slf: i64, velocity_iter: i32, position_iter: i32)
#wa:import dora physicsworld_set_should_contact
func physicsworld_set_should_contact(slf: i64, group_a: i32, group_b: i32, contact: i32)
#wa:import dora physicsworld_get_should_contact
func physicsworld_get_should_contact(slf: i64, group_a: i32, group_b: i32) => i32
#wa:import dora physicsworld_set_scale_factor
func physicsworld_set_scale_factor(val: f32);
#wa:import dora physicsworld_get_scale_factor
func physicsworld_get_scale_factor() => f32
#wa:import dora physicsworld_new
func physicsworld_new() => i64
type PhysicsWorld struct { Node }
func PhysicsWorldFrom(raw: i64) => *PhysicsWorld {
	if raw == 0 {
		return nil
	}
	object := PhysicsWorld{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func PhysicsWorld.GetTypeId() => i32 {
	return physicsworld_type()
}
func PhysicsWorld.Query(rect: Rect, handler: func(body: Body) => bool) => bool {
	stack0 := NewCallStack()
	func_id0 := PushFunction(func() {
		body := *BodyFrom(stack0.PopObject().GetRaw())
		result_ := handler(body)
		stack0.Push(result_)
	})
	return physicsworld_query(*this.raw, rect.GetRaw(), func_id0, *stack0.raw) != 0
}
func PhysicsWorld.Raycast(start: Vec2, stop: Vec2, closest: bool, handler: func(body: Body, point: Vec2, normal: Vec2) => bool) => bool {
	stack0 := NewCallStack()
	func_id0 := PushFunction(func() {
		body := *BodyFrom(stack0.PopObject().GetRaw())
		point, _ := stack0.PopVec2()
		normal, _ := stack0.PopVec2()
		result_ := handler(body, point, normal)
		stack0.Push(result_)
	})
	return physicsworld_raycast(*this.raw, start.ToValue(), stop.ToValue(), ToDoraBool(closest), func_id0, *stack0.raw) != 0
}
func PhysicsWorld.SetIterations(velocity_iter: i32, position_iter: i32) {
	physicsworld_set_iterations(*this.raw, velocity_iter, position_iter)
}
func PhysicsWorld.SetShouldContact(group_a: i32, group_b: i32, contact: bool) {
	physicsworld_set_should_contact(*this.raw, group_a, group_b, ToDoraBool(contact))
}
func PhysicsWorld.GetShouldContact(group_a: i32, group_b: i32) => bool {
	return physicsworld_get_should_contact(*this.raw, group_a, group_b) != 0
}
func PhysicsWorldSetScaleFactor(val: f32) {
	physicsworld_set_scale_factor(val)
}
func PhysicsWorldGetScaleFactor() => f32 {
	return physicsworld_get_scale_factor()
}
func NewPhysicsWorld() => PhysicsWorld {
	object := PhysicsWorld{}
	raw := physicsworld_new()
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora physicsworld_type
func physicsworld_type() => i32
#wa:import dora physicsworld_query
func physicsworld_query(slf: i64, rect: i64, func0: i32, stack0: i64) => i32
#wa:import dora physicsworld_raycast
func physicsworld_raycast(slf: i64, start: i64, stop: i64, closest: i32, func0: i32, stack0: i64) => i32
#wa:import dora physicsworld_set_iterations
func physicsworld_set_iterations(slf: i64, velocity_iter: i32, position_iter: i32)
#wa:import dora physicsworld_set_should_contact
func physicsworld_set_should_contact(slf: i64, group_a: i32, group_b: i32, contact: i32)
#wa:import dora physicsworld_get_should_contact
func physicsworld_get_should_contact(slf: i64, group_a: i32, group_b: i32) => i32
#wa:import dora physicsworld_set_scale_factor
func physicsworld_set_scale_factor(val: f32);
#wa:import dora physicsworld_get_scale_factor
func physicsworld_get_scale_factor() => f32
#wa:import dora physicsworld_new
func physicsworld_new() => i64
type PhysicsWorld struct { Node }
func PhysicsWorldFrom(raw: i64) => *PhysicsWorld {
	if raw == 0 {
		return nil
	}
	ObjectRetain(raw)
	object := PhysicsWorld{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func PhysicsWorld.GetTypeId() => i32 {
	return physicsworld_type()
}
func ObjectAsPhysicsWorld(object: Object) => *PhysicsWorld {
	if object.GetTypeId() == physicsworld_type() {
		return PhysicsWorldFrom(object.GetRaw())
	}
	return nil
}
/// Queries the physics world for all bodies that intersect with the specified rectangle.
///
/// # Arguments
///
/// * `rect` - The rectangle to query for bodies.
/// * `handler` - A function that is called for each body found in the query. The function takes a `Body` as an argument and returns a `bool` indicating whether to continue querying for more bodies. Return `false` to continue, `true` to stop.
///
/// # Returns
///
/// * `bool` - Whether the query was interrupted. `true` means interrupted, `false` otherwise.
func PhysicsWorld.Query(rect: Rect, handler: func(body: Body) => bool) => bool {
	stack0 := NewCallStack()
	func_id0 := PushFunction(func() {
		body := *BodyFrom(stack0.PopObject().GetRaw())
		result_ := handler(body)
		stack0.Push(result_)
	})
	return physicsworld_query(*this.raw, rect.GetRaw(), func_id0, *stack0.raw) != 0
}
/// Casts a ray through the physics world and finds the first body that intersects with the ray.
///
/// # Arguments
///
/// * `start` - The starting point of the ray.
/// * `stop` - The ending point of the ray.
/// * `closest` - Whether to stop ray casting upon the closest body that intersects with the ray. Set `closest` to `true` to get a faster ray casting search.
/// * `handler` - A function that is called for each body found in the raycast. The function takes a `Body`, a `Vec2` representing the point where the ray intersects with the body, and a `Vec2` representing the normal vector at the point of intersection as arguments, and returns a `bool` indicating whether to continue casting the ray for more bodies. Return `false` to continue, `true` to stop.
///
/// # Returns
///
/// * `bool` - Whether the raycast was interrupted. `true` means interrupted, `false` otherwise.
func PhysicsWorld.Raycast(start: Vec2, stop: Vec2, closest: bool, handler: func(body: Body, point: Vec2, normal: Vec2) => bool) => bool {
	stack0 := NewCallStack()
	func_id0 := PushFunction(func() {
		body := *BodyFrom(stack0.PopObject().GetRaw())
		point, _ := stack0.PopVec2()
		normal, _ := stack0.PopVec2()
		result_ := handler(body, point, normal)
		stack0.Push(result_)
	})
	return physicsworld_raycast(*this.raw, start.ToValue(), stop.ToValue(), ToDoraBool(closest), func_id0, *stack0.raw) != 0
}
/// Sets the number of velocity and position iterations to perform in the physics world.
///
/// # Arguments
///
/// * `velocity_iter` - The number of velocity iterations to perform.
/// * `position_iter` - The number of position iterations to perform.
func PhysicsWorld.SetIterations(velocity_iter: i32, position_iter: i32) {
	physicsworld_set_iterations(*this.raw, velocity_iter, position_iter)
}
/// Sets whether two physics groups should make contact with each other or not.
///
/// # Arguments
///
/// * `groupA` - The first physics group.
/// * `groupB` - The second physics group.
/// * `contact` - Whether the two groups should make contact with each other.
func PhysicsWorld.SetShouldContact(group_a: i32, group_b: i32, contact: bool) {
	physicsworld_set_should_contact(*this.raw, group_a, group_b, ToDoraBool(contact))
}
/// Gets whether two physics groups should make contact with each other or not.
///
/// # Arguments
///
/// * `groupA` - The first physics group.
/// * `groupB` - The second physics group.
///
/// # Returns
///
/// * `bool` - Whether the two groups should make contact with each other.
func PhysicsWorld.GetShouldContact(group_a: i32, group_b: i32) => bool {
	return physicsworld_get_should_contact(*this.raw, group_a, group_b) != 0
}
/// Sets the factor used for converting physics engine meters value to pixel value.
/// Default 100.0 is a good value since the physics engine can well simulate real life objects
/// between 0.1 to 10 meters. Use value 100.0 we can simulate game objects
/// between 10 to 1000 pixels that suite most games.
/// You can change this value before any physics body creation.
func PhysicsWorldSetScaleFactor(val: f32) {
	physicsworld_set_scale_factor(val)
}
/// Gets the factor used for converting physics engine meters value to pixel value.
/// Default 100.0 is a good value since the physics engine can well simulate real life objects
/// between 0.1 to 10 meters. Use value 100.0 we can simulate game objects
/// between 10 to 1000 pixels that suite most games.
/// You can change this value before any physics body creation.
func PhysicsWorldGetScaleFactor() => f32 {
	return physicsworld_get_scale_factor()
}
/// Creates a new `PhysicsWorld` object.
///
/// # Returns
///
/// * A new `PhysicsWorld` object.
func NewPhysicsWorld() => PhysicsWorld {
	raw := physicsworld_new()
	object := PhysicsWorld{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
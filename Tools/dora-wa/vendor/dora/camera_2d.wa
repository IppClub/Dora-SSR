/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora camera2d_type
func camera2d_type() => i32
#wa:import dora camera2d_set_rotation
func camera2d_set_rotation(slf: i64, val: f32);
#wa:import dora camera2d_get_rotation
func camera2d_get_rotation(slf: i64) => f32
#wa:import dora camera2d_set_zoom
func camera2d_set_zoom(slf: i64, val: f32);
#wa:import dora camera2d_get_zoom
func camera2d_get_zoom(slf: i64) => f32
#wa:import dora camera2d_set_position
func camera2d_set_position(slf: i64, val: i64);
#wa:import dora camera2d_get_position
func camera2d_get_position(slf: i64) => i64
#wa:import dora camera2d_new
func camera2d_new(name: i64) => i64
type Camera2D struct { Camera }
func Camera2DFrom(raw: i64) => *Camera2D {
	if raw == 0 {
		return nil
	}
	object := Camera2D{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func Camera2D.GetTypeId() => i32 {
	return camera2d_type()
}
func ObjectAsCamera2D(object: Object) => *Camera2D {
	if object.GetTypeId() == camera2d_type() {
		ObjectRetain(object.GetRaw())
		return Camera2DFrom(object.GetRaw())
	}
	return nil
}
/// Sets the rotation angle of the camera in degrees.
func Camera2D.SetRotation(val: f32) {
	camera2d_set_rotation(*this.raw, val)
}
/// Gets the rotation angle of the camera in degrees.
func Camera2D.GetRotation() => f32 {
	return camera2d_get_rotation(*this.raw)
}
/// Sets the factor by which to zoom the camera. If set to 1.0, the view is normal sized. If set to 2.0, items will appear double in size.
func Camera2D.SetZoom(val: f32) {
	camera2d_set_zoom(*this.raw, val)
}
/// Gets the factor by which to zoom the camera. If set to 1.0, the view is normal sized. If set to 2.0, items will appear double in size.
func Camera2D.GetZoom() => f32 {
	return camera2d_get_zoom(*this.raw)
}
/// Sets the position of the camera in the game world.
func Camera2D.SetPosition(val: Vec2) {
	camera2d_set_position(*this.raw, val.ToValue())
}
/// Gets the position of the camera in the game world.
func Camera2D.GetPosition() => Vec2 {
	return Vec2FromValue(camera2d_get_position(*this.raw))
}
/// Creates a new Camera2D object with the given name.
///
/// # Arguments
///
/// * `name` - The name of the Camera2D object.
///
/// # Returns
///
/// * `Camera2D` - A new instance of the Camera2D object.
func NewCamera2D(name: string) => Camera2D {
	raw := camera2d_new(ToDoraString(name))
	object := Camera2D{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return object
}
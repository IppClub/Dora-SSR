/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora sensor_type
func sensor_type() => i32
#wa:import dora sensor_set_enabled
func sensor_set_enabled(slf: i64, val: i32);
#wa:import dora sensor_is_enabled
func sensor_is_enabled(slf: i64) => i32
#wa:import dora sensor_get_tag
func sensor_get_tag(slf: i64) => i32
#wa:import dora sensor_get_owner
func sensor_get_owner(slf: i64) => i64
#wa:import dora sensor_is_sensed
func sensor_is_sensed(slf: i64) => i32
#wa:import dora sensor_get_sensed_bodies
func sensor_get_sensed_bodies(slf: i64) => i64
#wa:import dora sensor_contains
func sensor_contains(slf: i64, body: i64) => i32
type Sensor struct { Object }
func SensorFrom(raw: i64) => *Sensor {
	if raw == 0 {
		return nil
	}
	object := Sensor{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func Sensor.GetTypeId() => i32 {
	return sensor_type()
}
func ObjectAsSensor(object: Object) => *Sensor {
	if object.GetTypeId() == sensor_type() {
		return SensorFrom(object.GetRaw())
	}
	return nil
}
/// Sets whether the sensor is currently enabled or not.
func Sensor.SetEnabled(val: bool) {
	sensor_set_enabled(*this.raw, ToDoraBool(val))
}
/// Gets whether the sensor is currently enabled or not.
func Sensor.IsEnabled() => bool {
	return sensor_is_enabled(*this.raw) != 0
}
/// Gets the tag for the sensor.
func Sensor.GetTag() => i32 {
	return sensor_get_tag(*this.raw)
}
/// Gets the "Body" object that owns the sensor.
func Sensor.GetOwner() => Body {
	return *BodyFrom(sensor_get_owner(*this.raw))
}
/// Gets whether the sensor is currently sensing any other "Body" objects in the game world.
func Sensor.IsSensed() => bool {
	return sensor_is_sensed(*this.raw) != 0
}
/// Gets the array of "Body" objects that are currently being sensed by the sensor.
func Sensor.GetSensedBodies() => Array {
	return *ArrayFrom(sensor_get_sensed_bodies(*this.raw))
}
/// Determines whether the specified `Body` object is currently being sensed by the sensor.
///
/// # Arguments
///
/// * `body` - The `Body` object to check if it is being sensed.
///
/// # Returns
///
/// * `bool` - `true` if the `Body` object is being sensed by the sensor, `false` otherwise.
func Sensor.Contains(body: Body) => bool {
	return sensor_contains(*this.raw, body.GetRaw()) != 0
}
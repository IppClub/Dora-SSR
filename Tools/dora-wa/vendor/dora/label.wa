/* Copyright (c) 2024 Li Jin, dragon-fly@qq.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

#wa:import dora label_type
func label_type() => i32
#wa:import dora label_set_alignment
func label_set_alignment(slf: i64, val: i32);
#wa:import dora label_get_alignment
func label_get_alignment(slf: i64) => i32
#wa:import dora label_set_alpha_ref
func label_set_alpha_ref(slf: i64, val: f32);
#wa:import dora label_get_alpha_ref
func label_get_alpha_ref(slf: i64) => f32
#wa:import dora label_set_text_width
func label_set_text_width(slf: i64, val: f32);
#wa:import dora label_get_text_width
func label_get_text_width(slf: i64) => f32
#wa:import dora label_set_spacing
func label_set_spacing(slf: i64, val: f32);
#wa:import dora label_get_spacing
func label_get_spacing(slf: i64) => f32
#wa:import dora label_set_line_gap
func label_set_line_gap(slf: i64, val: f32);
#wa:import dora label_get_line_gap
func label_get_line_gap(slf: i64) => f32
#wa:import dora label_set_outline_color
func label_set_outline_color(slf: i64, val: i32);
#wa:import dora label_get_outline_color
func label_get_outline_color(slf: i64) => i32
#wa:import dora label_set_outline_width
func label_set_outline_width(slf: i64, val: f32);
#wa:import dora label_get_outline_width
func label_get_outline_width(slf: i64) => f32
#wa:import dora label_set_smooth
func label_set_smooth(slf: i64, val: i64);
#wa:import dora label_get_smooth
func label_get_smooth(slf: i64) => i64
#wa:import dora label_set_text
func label_set_text(slf: i64, val: i64);
#wa:import dora label_get_text
func label_get_text(slf: i64) => i64
#wa:import dora label__set_blend_func
func label__set_blend_func(slf: i64, blend_func: i64)
#wa:import dora label__get_blend_func
func label__get_blend_func(slf: i64) => i64
#wa:import dora label_set_depth_write
func label_set_depth_write(slf: i64, val: i32);
#wa:import dora label_is_depth_write
func label_is_depth_write(slf: i64) => i32
#wa:import dora label_set_batched
func label_set_batched(slf: i64, val: i32);
#wa:import dora label_is_batched
func label_is_batched(slf: i64) => i32
#wa:import dora label_set_effect
func label_set_effect(slf: i64, val: i64);
#wa:import dora label_get_effect
func label_get_effect(slf: i64) => i64
#wa:import dora label_get_character_count
func label_get_character_count(slf: i64) => i32
#wa:import dora label_get_character
func label_get_character(slf: i64, index: i32) => i64
#wa:import dora label_get_automatic_width
func label_get_automatic_width() => f32
#wa:import dora label_new
func label_new(font_name: i64, font_size: i32, sdf: i32) => i64
#wa:import dora label_with_str
func label_with_str(font_str: i64) => i64
type Label struct { Node }
func LabelFrom(raw: i64) => *Label {
	if raw == 0 {
		return nil
	}
	object := Label{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	result := &object
	return result
}
func Label.GetTypeId() => i32 {
	return label_type()
}
func Label.SetAlignment(val: TextAlign) {
	label_set_alignment(*this.raw, val.ToValue())
}
func Label.GetAlignment() => TextAlign {
	return TextAlign{value: label_get_alignment(*this.raw)}
}
func Label.SetAlphaRef(val: f32) {
	label_set_alpha_ref(*this.raw, val)
}
func Label.GetAlphaRef() => f32 {
	return label_get_alpha_ref(*this.raw)
}
func Label.SetTextWidth(val: f32) {
	label_set_text_width(*this.raw, val)
}
func Label.GetTextWidth() => f32 {
	return label_get_text_width(*this.raw)
}
func Label.SetSpacing(val: f32) {
	label_set_spacing(*this.raw, val)
}
func Label.GetSpacing() => f32 {
	return label_get_spacing(*this.raw)
}
func Label.SetLineGap(val: f32) {
	label_set_line_gap(*this.raw, val)
}
func Label.GetLineGap() => f32 {
	return label_get_line_gap(*this.raw)
}
func Label.SetOutlineColor(val: Color) {
	label_set_outline_color(*this.raw, val.ToARGB())
}
func Label.GetOutlineColor() => Color {
	return ColorFromARGB(label_get_outline_color(*this.raw))
}
func Label.SetOutlineWidth(val: f32) {
	label_set_outline_width(*this.raw, val)
}
func Label.GetOutlineWidth() => f32 {
	return label_get_outline_width(*this.raw)
}
func Label.SetSmooth(val: Vec2) {
	label_set_smooth(*this.raw, val.ToValue())
}
func Label.GetSmooth() => Vec2 {
	return Vec2FromValue(label_get_smooth(*this.raw))
}
func Label.SetText(val: string) {
	label_set_text(*this.raw, ToDoraString(val))
}
func Label.GetText() => string {
	return FromDoraString(label_get_text(*this.raw))
}
func Label.SetBlendFunc(blend_func: BlendFunc) {
	label__set_blend_func(*this.raw, blend_func.ToValue())
}
func Label.GetBlendFunc() => BlendFunc {
	return BlendFuncFrom(label__get_blend_func(*this.raw))
}
func Label.SetDepthWrite(val: bool) {
	label_set_depth_write(*this.raw, ToDoraBool(val))
}
func Label.IsDepthWrite() => bool {
	return label_is_depth_write(*this.raw) != 0
}
func Label.SetBatched(val: bool) {
	label_set_batched(*this.raw, ToDoraBool(val))
}
func Label.IsBatched() => bool {
	return label_is_batched(*this.raw) != 0
}
func Label.SetEffect(val: SpriteEffect) {
	label_set_effect(*this.raw, val.GetRaw())
}
func Label.GetEffect() => SpriteEffect {
	return *SpriteEffectFrom(label_get_effect(*this.raw))
}
func Label.GetCharacterCount() => i32 {
	return label_get_character_count(*this.raw)
}
func Label.GetCharacter(index: i32) => *Sprite {
	ptr_ := label_get_character(*this.raw, index)
	if ptr_ == 0 {
		return nil
	}
	obj_ := *SpriteFrom(ptr_)
	return &obj_
}
func LabelGetAutomaticWidth() => f32 {
	return label_get_automatic_width()
}
func NewLabel(font_name: string, font_size: i32, sdf: bool) => *Label {
	raw := label_new(ToDoraString(font_name), font_size, ToDoraBool(sdf))
	if raw == 0 {
		return nil
	}
	object := Label{}
	object.raw = &raw
	setFinalizer(object.raw, ObjectFinalizer)
	return &object
}
func LabelWithStr(font_str: string) => *Label {
	ptr_ := label_with_str(ToDoraString(font_str))
	if ptr_ == 0 {
		return nil
	}
	obj_ := *LabelFrom(ptr_)
	return &obj_
}